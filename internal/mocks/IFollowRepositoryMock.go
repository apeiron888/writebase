// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "write_base/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// MockIFollowRepository is an autogenerated mock type for the IFollowRepository type
type MockIFollowRepository struct {
	mock.Mock
}

type MockIFollowRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIFollowRepository) EXPECT() *MockIFollowRepository_Expecter {
	return &MockIFollowRepository_Expecter{mock: &_m.Mock}
}

// FollowUser provides a mock function with given fields: ctx, followerID, followeeID
func (_m *MockIFollowRepository) FollowUser(ctx context.Context, followerID string, followeeID string) error {
	ret := _m.Called(ctx, followerID, followeeID)

	if len(ret) == 0 {
		panic("no return value specified for FollowUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, followerID, followeeID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIFollowRepository_FollowUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FollowUser'
type MockIFollowRepository_FollowUser_Call struct {
	*mock.Call
}

// FollowUser is a helper method to define mock.On call
//   - ctx context.Context
//   - followerID string
//   - followeeID string
func (_e *MockIFollowRepository_Expecter) FollowUser(ctx interface{}, followerID interface{}, followeeID interface{}) *MockIFollowRepository_FollowUser_Call {
	return &MockIFollowRepository_FollowUser_Call{Call: _e.mock.On("FollowUser", ctx, followerID, followeeID)}
}

func (_c *MockIFollowRepository_FollowUser_Call) Run(run func(ctx context.Context, followerID string, followeeID string)) *MockIFollowRepository_FollowUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockIFollowRepository_FollowUser_Call) Return(_a0 error) *MockIFollowRepository_FollowUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIFollowRepository_FollowUser_Call) RunAndReturn(run func(context.Context, string, string) error) *MockIFollowRepository_FollowUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetFollowers provides a mock function with given fields: ctx, userID
func (_m *MockIFollowRepository) GetFollowers(ctx context.Context, userID string) ([]*domain.User, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetFollowers")
	}

	var r0 []*domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*domain.User, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*domain.User); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIFollowRepository_GetFollowers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFollowers'
type MockIFollowRepository_GetFollowers_Call struct {
	*mock.Call
}

// GetFollowers is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
func (_e *MockIFollowRepository_Expecter) GetFollowers(ctx interface{}, userID interface{}) *MockIFollowRepository_GetFollowers_Call {
	return &MockIFollowRepository_GetFollowers_Call{Call: _e.mock.On("GetFollowers", ctx, userID)}
}

func (_c *MockIFollowRepository_GetFollowers_Call) Run(run func(ctx context.Context, userID string)) *MockIFollowRepository_GetFollowers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockIFollowRepository_GetFollowers_Call) Return(_a0 []*domain.User, _a1 error) *MockIFollowRepository_GetFollowers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIFollowRepository_GetFollowers_Call) RunAndReturn(run func(context.Context, string) ([]*domain.User, error)) *MockIFollowRepository_GetFollowers_Call {
	_c.Call.Return(run)
	return _c
}

// GetFollowing provides a mock function with given fields: ctx, userID
func (_m *MockIFollowRepository) GetFollowing(ctx context.Context, userID string) ([]*domain.User, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetFollowing")
	}

	var r0 []*domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*domain.User, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*domain.User); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIFollowRepository_GetFollowing_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFollowing'
type MockIFollowRepository_GetFollowing_Call struct {
	*mock.Call
}

// GetFollowing is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
func (_e *MockIFollowRepository_Expecter) GetFollowing(ctx interface{}, userID interface{}) *MockIFollowRepository_GetFollowing_Call {
	return &MockIFollowRepository_GetFollowing_Call{Call: _e.mock.On("GetFollowing", ctx, userID)}
}

func (_c *MockIFollowRepository_GetFollowing_Call) Run(run func(ctx context.Context, userID string)) *MockIFollowRepository_GetFollowing_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockIFollowRepository_GetFollowing_Call) Return(_a0 []*domain.User, _a1 error) *MockIFollowRepository_GetFollowing_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIFollowRepository_GetFollowing_Call) RunAndReturn(run func(context.Context, string) ([]*domain.User, error)) *MockIFollowRepository_GetFollowing_Call {
	_c.Call.Return(run)
	return _c
}

// IsFollowing provides a mock function with given fields: ctx, followerID, followeeID
func (_m *MockIFollowRepository) IsFollowing(ctx context.Context, followerID string, followeeID string) (bool, error) {
	ret := _m.Called(ctx, followerID, followeeID)

	if len(ret) == 0 {
		panic("no return value specified for IsFollowing")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (bool, error)); ok {
		return rf(ctx, followerID, followeeID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = rf(ctx, followerID, followeeID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, followerID, followeeID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIFollowRepository_IsFollowing_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsFollowing'
type MockIFollowRepository_IsFollowing_Call struct {
	*mock.Call
}

// IsFollowing is a helper method to define mock.On call
//   - ctx context.Context
//   - followerID string
//   - followeeID string
func (_e *MockIFollowRepository_Expecter) IsFollowing(ctx interface{}, followerID interface{}, followeeID interface{}) *MockIFollowRepository_IsFollowing_Call {
	return &MockIFollowRepository_IsFollowing_Call{Call: _e.mock.On("IsFollowing", ctx, followerID, followeeID)}
}

func (_c *MockIFollowRepository_IsFollowing_Call) Run(run func(ctx context.Context, followerID string, followeeID string)) *MockIFollowRepository_IsFollowing_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockIFollowRepository_IsFollowing_Call) Return(_a0 bool, _a1 error) *MockIFollowRepository_IsFollowing_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIFollowRepository_IsFollowing_Call) RunAndReturn(run func(context.Context, string, string) (bool, error)) *MockIFollowRepository_IsFollowing_Call {
	_c.Call.Return(run)
	return _c
}

// UnfollowUser provides a mock function with given fields: ctx, followerID, followeeID
func (_m *MockIFollowRepository) UnfollowUser(ctx context.Context, followerID string, followeeID string) error {
	ret := _m.Called(ctx, followerID, followeeID)

	if len(ret) == 0 {
		panic("no return value specified for UnfollowUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, followerID, followeeID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIFollowRepository_UnfollowUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnfollowUser'
type MockIFollowRepository_UnfollowUser_Call struct {
	*mock.Call
}

// UnfollowUser is a helper method to define mock.On call
//   - ctx context.Context
//   - followerID string
//   - followeeID string
func (_e *MockIFollowRepository_Expecter) UnfollowUser(ctx interface{}, followerID interface{}, followeeID interface{}) *MockIFollowRepository_UnfollowUser_Call {
	return &MockIFollowRepository_UnfollowUser_Call{Call: _e.mock.On("UnfollowUser", ctx, followerID, followeeID)}
}

func (_c *MockIFollowRepository_UnfollowUser_Call) Run(run func(ctx context.Context, followerID string, followeeID string)) *MockIFollowRepository_UnfollowUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockIFollowRepository_UnfollowUser_Call) Return(_a0 error) *MockIFollowRepository_UnfollowUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIFollowRepository_UnfollowUser_Call) RunAndReturn(run func(context.Context, string, string) error) *MockIFollowRepository_UnfollowUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIFollowRepository creates a new instance of MockIFollowRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIFollowRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIFollowRepository {
	mock := &MockIFollowRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
