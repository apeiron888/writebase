// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "write_base/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// MockICommentUsecase is an autogenerated mock type for the ICommentUsecase type
type MockICommentUsecase struct {
	mock.Mock
}

type MockICommentUsecase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockICommentUsecase) EXPECT() *MockICommentUsecase_Expecter {
	return &MockICommentUsecase_Expecter{mock: &_m.Mock}
}

// CreateComment provides a mock function with given fields: ctx, comment
func (_m *MockICommentUsecase) CreateComment(ctx context.Context, comment *domain.Comment) error {
	ret := _m.Called(ctx, comment)

	if len(ret) == 0 {
		panic("no return value specified for CreateComment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Comment) error); ok {
		r0 = rf(ctx, comment)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockICommentUsecase_CreateComment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateComment'
type MockICommentUsecase_CreateComment_Call struct {
	*mock.Call
}

// CreateComment is a helper method to define mock.On call
//   - ctx context.Context
//   - comment *domain.Comment
func (_e *MockICommentUsecase_Expecter) CreateComment(ctx interface{}, comment interface{}) *MockICommentUsecase_CreateComment_Call {
	return &MockICommentUsecase_CreateComment_Call{Call: _e.mock.On("CreateComment", ctx, comment)}
}

func (_c *MockICommentUsecase_CreateComment_Call) Run(run func(ctx context.Context, comment *domain.Comment)) *MockICommentUsecase_CreateComment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.Comment))
	})
	return _c
}

func (_c *MockICommentUsecase_CreateComment_Call) Return(_a0 error) *MockICommentUsecase_CreateComment_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockICommentUsecase_CreateComment_Call) RunAndReturn(run func(context.Context, *domain.Comment) error) *MockICommentUsecase_CreateComment_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteComment provides a mock function with given fields: ctx, commentID
func (_m *MockICommentUsecase) DeleteComment(ctx context.Context, commentID string) error {
	ret := _m.Called(ctx, commentID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteComment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, commentID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockICommentUsecase_DeleteComment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteComment'
type MockICommentUsecase_DeleteComment_Call struct {
	*mock.Call
}

// DeleteComment is a helper method to define mock.On call
//   - ctx context.Context
//   - commentID string
func (_e *MockICommentUsecase_Expecter) DeleteComment(ctx interface{}, commentID interface{}) *MockICommentUsecase_DeleteComment_Call {
	return &MockICommentUsecase_DeleteComment_Call{Call: _e.mock.On("DeleteComment", ctx, commentID)}
}

func (_c *MockICommentUsecase_DeleteComment_Call) Run(run func(ctx context.Context, commentID string)) *MockICommentUsecase_DeleteComment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockICommentUsecase_DeleteComment_Call) Return(_a0 error) *MockICommentUsecase_DeleteComment_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockICommentUsecase_DeleteComment_Call) RunAndReturn(run func(context.Context, string) error) *MockICommentUsecase_DeleteComment_Call {
	_c.Call.Return(run)
	return _c
}

// GetCommentByID provides a mock function with given fields: ctx, commentID
func (_m *MockICommentUsecase) GetCommentByID(ctx context.Context, commentID string) (*domain.Comment, error) {
	ret := _m.Called(ctx, commentID)

	if len(ret) == 0 {
		panic("no return value specified for GetCommentByID")
	}

	var r0 *domain.Comment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.Comment, error)); ok {
		return rf(ctx, commentID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.Comment); ok {
		r0 = rf(ctx, commentID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Comment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, commentID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockICommentUsecase_GetCommentByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCommentByID'
type MockICommentUsecase_GetCommentByID_Call struct {
	*mock.Call
}

// GetCommentByID is a helper method to define mock.On call
//   - ctx context.Context
//   - commentID string
func (_e *MockICommentUsecase_Expecter) GetCommentByID(ctx interface{}, commentID interface{}) *MockICommentUsecase_GetCommentByID_Call {
	return &MockICommentUsecase_GetCommentByID_Call{Call: _e.mock.On("GetCommentByID", ctx, commentID)}
}

func (_c *MockICommentUsecase_GetCommentByID_Call) Run(run func(ctx context.Context, commentID string)) *MockICommentUsecase_GetCommentByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockICommentUsecase_GetCommentByID_Call) Return(_a0 *domain.Comment, _a1 error) *MockICommentUsecase_GetCommentByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockICommentUsecase_GetCommentByID_Call) RunAndReturn(run func(context.Context, string) (*domain.Comment, error)) *MockICommentUsecase_GetCommentByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetCommentsByPostID provides a mock function with given fields: ctx, postID
func (_m *MockICommentUsecase) GetCommentsByPostID(ctx context.Context, postID string) ([]*domain.Comment, error) {
	ret := _m.Called(ctx, postID)

	if len(ret) == 0 {
		panic("no return value specified for GetCommentsByPostID")
	}

	var r0 []*domain.Comment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*domain.Comment, error)); ok {
		return rf(ctx, postID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*domain.Comment); ok {
		r0 = rf(ctx, postID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Comment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, postID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockICommentUsecase_GetCommentsByPostID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCommentsByPostID'
type MockICommentUsecase_GetCommentsByPostID_Call struct {
	*mock.Call
}

// GetCommentsByPostID is a helper method to define mock.On call
//   - ctx context.Context
//   - postID string
func (_e *MockICommentUsecase_Expecter) GetCommentsByPostID(ctx interface{}, postID interface{}) *MockICommentUsecase_GetCommentsByPostID_Call {
	return &MockICommentUsecase_GetCommentsByPostID_Call{Call: _e.mock.On("GetCommentsByPostID", ctx, postID)}
}

func (_c *MockICommentUsecase_GetCommentsByPostID_Call) Run(run func(ctx context.Context, postID string)) *MockICommentUsecase_GetCommentsByPostID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockICommentUsecase_GetCommentsByPostID_Call) Return(_a0 []*domain.Comment, _a1 error) *MockICommentUsecase_GetCommentsByPostID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockICommentUsecase_GetCommentsByPostID_Call) RunAndReturn(run func(context.Context, string) ([]*domain.Comment, error)) *MockICommentUsecase_GetCommentsByPostID_Call {
	_c.Call.Return(run)
	return _c
}

// GetCommentsByUserID provides a mock function with given fields: ctx, userID
func (_m *MockICommentUsecase) GetCommentsByUserID(ctx context.Context, userID string) ([]*domain.Comment, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetCommentsByUserID")
	}

	var r0 []*domain.Comment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*domain.Comment, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*domain.Comment); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Comment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockICommentUsecase_GetCommentsByUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCommentsByUserID'
type MockICommentUsecase_GetCommentsByUserID_Call struct {
	*mock.Call
}

// GetCommentsByUserID is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
func (_e *MockICommentUsecase_Expecter) GetCommentsByUserID(ctx interface{}, userID interface{}) *MockICommentUsecase_GetCommentsByUserID_Call {
	return &MockICommentUsecase_GetCommentsByUserID_Call{Call: _e.mock.On("GetCommentsByUserID", ctx, userID)}
}

func (_c *MockICommentUsecase_GetCommentsByUserID_Call) Run(run func(ctx context.Context, userID string)) *MockICommentUsecase_GetCommentsByUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockICommentUsecase_GetCommentsByUserID_Call) Return(_a0 []*domain.Comment, _a1 error) *MockICommentUsecase_GetCommentsByUserID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockICommentUsecase_GetCommentsByUserID_Call) RunAndReturn(run func(context.Context, string) ([]*domain.Comment, error)) *MockICommentUsecase_GetCommentsByUserID_Call {
	_c.Call.Return(run)
	return _c
}

// GetReplies provides a mock function with given fields: ctx, parentID
func (_m *MockICommentUsecase) GetReplies(ctx context.Context, parentID string) ([]*domain.Comment, error) {
	ret := _m.Called(ctx, parentID)

	if len(ret) == 0 {
		panic("no return value specified for GetReplies")
	}

	var r0 []*domain.Comment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*domain.Comment, error)); ok {
		return rf(ctx, parentID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*domain.Comment); ok {
		r0 = rf(ctx, parentID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Comment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, parentID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockICommentUsecase_GetReplies_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetReplies'
type MockICommentUsecase_GetReplies_Call struct {
	*mock.Call
}

// GetReplies is a helper method to define mock.On call
//   - ctx context.Context
//   - parentID string
func (_e *MockICommentUsecase_Expecter) GetReplies(ctx interface{}, parentID interface{}) *MockICommentUsecase_GetReplies_Call {
	return &MockICommentUsecase_GetReplies_Call{Call: _e.mock.On("GetReplies", ctx, parentID)}
}

func (_c *MockICommentUsecase_GetReplies_Call) Run(run func(ctx context.Context, parentID string)) *MockICommentUsecase_GetReplies_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockICommentUsecase_GetReplies_Call) Return(_a0 []*domain.Comment, _a1 error) *MockICommentUsecase_GetReplies_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockICommentUsecase_GetReplies_Call) RunAndReturn(run func(context.Context, string) ([]*domain.Comment, error)) *MockICommentUsecase_GetReplies_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateComment provides a mock function with given fields: ctx, comment
func (_m *MockICommentUsecase) UpdateComment(ctx context.Context, comment *domain.Comment) error {
	ret := _m.Called(ctx, comment)

	if len(ret) == 0 {
		panic("no return value specified for UpdateComment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Comment) error); ok {
		r0 = rf(ctx, comment)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockICommentUsecase_UpdateComment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateComment'
type MockICommentUsecase_UpdateComment_Call struct {
	*mock.Call
}

// UpdateComment is a helper method to define mock.On call
//   - ctx context.Context
//   - comment *domain.Comment
func (_e *MockICommentUsecase_Expecter) UpdateComment(ctx interface{}, comment interface{}) *MockICommentUsecase_UpdateComment_Call {
	return &MockICommentUsecase_UpdateComment_Call{Call: _e.mock.On("UpdateComment", ctx, comment)}
}

func (_c *MockICommentUsecase_UpdateComment_Call) Run(run func(ctx context.Context, comment *domain.Comment)) *MockICommentUsecase_UpdateComment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.Comment))
	})
	return _c
}

func (_c *MockICommentUsecase_UpdateComment_Call) Return(_a0 error) *MockICommentUsecase_UpdateComment_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockICommentUsecase_UpdateComment_Call) RunAndReturn(run func(context.Context, *domain.Comment) error) *MockICommentUsecase_UpdateComment_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockICommentUsecase creates a new instance of MockICommentUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockICommentUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockICommentUsecase {
	mock := &MockICommentUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
