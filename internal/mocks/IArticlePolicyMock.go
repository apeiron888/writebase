// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	domain "write_base/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// MockIArticlePolicy is an autogenerated mock type for the IArticlePolicy type
type MockIArticlePolicy struct {
	mock.Mock
}

type MockIArticlePolicy_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIArticlePolicy) EXPECT() *MockIArticlePolicy_Expecter {
	return &MockIArticlePolicy_Expecter{mock: &_m.Mock}
}

// CanViewByID provides a mock function with given fields: userID, userRole, article
func (_m *MockIArticlePolicy) CanViewByID(userID string, userRole string, article domain.Article) bool {
	ret := _m.Called(userID, userRole, article)

	if len(ret) == 0 {
		panic("no return value specified for CanViewByID")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string, domain.Article) bool); ok {
		r0 = rf(userID, userRole, article)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockIArticlePolicy_CanViewByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CanViewByID'
type MockIArticlePolicy_CanViewByID_Call struct {
	*mock.Call
}

// CanViewByID is a helper method to define mock.On call
//   - userID string
//   - userRole string
//   - article domain.Article
func (_e *MockIArticlePolicy_Expecter) CanViewByID(userID interface{}, userRole interface{}, article interface{}) *MockIArticlePolicy_CanViewByID_Call {
	return &MockIArticlePolicy_CanViewByID_Call{Call: _e.mock.On("CanViewByID", userID, userRole, article)}
}

func (_c *MockIArticlePolicy_CanViewByID_Call) Run(run func(userID string, userRole string, article domain.Article)) *MockIArticlePolicy_CanViewByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(domain.Article))
	})
	return _c
}

func (_c *MockIArticlePolicy_CanViewByID_Call) Return(_a0 bool) *MockIArticlePolicy_CanViewByID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIArticlePolicy_CanViewByID_Call) RunAndReturn(run func(string, string, domain.Article) bool) *MockIArticlePolicy_CanViewByID_Call {
	_c.Call.Return(run)
	return _c
}

// IsAdmin provides a mock function with given fields: userID, userRole
func (_m *MockIArticlePolicy) IsAdmin(userID string, userRole string) bool {
	ret := _m.Called(userID, userRole)

	if len(ret) == 0 {
		panic("no return value specified for IsAdmin")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(userID, userRole)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockIArticlePolicy_IsAdmin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsAdmin'
type MockIArticlePolicy_IsAdmin_Call struct {
	*mock.Call
}

// IsAdmin is a helper method to define mock.On call
//   - userID string
//   - userRole string
func (_e *MockIArticlePolicy_Expecter) IsAdmin(userID interface{}, userRole interface{}) *MockIArticlePolicy_IsAdmin_Call {
	return &MockIArticlePolicy_IsAdmin_Call{Call: _e.mock.On("IsAdmin", userID, userRole)}
}

func (_c *MockIArticlePolicy_IsAdmin_Call) Run(run func(userID string, userRole string)) *MockIArticlePolicy_IsAdmin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockIArticlePolicy_IsAdmin_Call) Return(_a0 bool) *MockIArticlePolicy_IsAdmin_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIArticlePolicy_IsAdmin_Call) RunAndReturn(run func(string, string) bool) *MockIArticlePolicy_IsAdmin_Call {
	_c.Call.Return(run)
	return _c
}

// UserExists provides a mock function with given fields: userID
func (_m *MockIArticlePolicy) UserExists(userID string) bool {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for UserExists")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockIArticlePolicy_UserExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UserExists'
type MockIArticlePolicy_UserExists_Call struct {
	*mock.Call
}

// UserExists is a helper method to define mock.On call
//   - userID string
func (_e *MockIArticlePolicy_Expecter) UserExists(userID interface{}) *MockIArticlePolicy_UserExists_Call {
	return &MockIArticlePolicy_UserExists_Call{Call: _e.mock.On("UserExists", userID)}
}

func (_c *MockIArticlePolicy_UserExists_Call) Run(run func(userID string)) *MockIArticlePolicy_UserExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockIArticlePolicy_UserExists_Call) Return(_a0 bool) *MockIArticlePolicy_UserExists_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIArticlePolicy_UserExists_Call) RunAndReturn(run func(string) bool) *MockIArticlePolicy_UserExists_Call {
	_c.Call.Return(run)
	return _c
}

// UserOwnsArticle provides a mock function with given fields: userID, article
func (_m *MockIArticlePolicy) UserOwnsArticle(userID string, article domain.Article) bool {
	ret := _m.Called(userID, article)

	if len(ret) == 0 {
		panic("no return value specified for UserOwnsArticle")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, domain.Article) bool); ok {
		r0 = rf(userID, article)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockIArticlePolicy_UserOwnsArticle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UserOwnsArticle'
type MockIArticlePolicy_UserOwnsArticle_Call struct {
	*mock.Call
}

// UserOwnsArticle is a helper method to define mock.On call
//   - userID string
//   - article domain.Article
func (_e *MockIArticlePolicy_Expecter) UserOwnsArticle(userID interface{}, article interface{}) *MockIArticlePolicy_UserOwnsArticle_Call {
	return &MockIArticlePolicy_UserOwnsArticle_Call{Call: _e.mock.On("UserOwnsArticle", userID, article)}
}

func (_c *MockIArticlePolicy_UserOwnsArticle_Call) Run(run func(userID string, article domain.Article)) *MockIArticlePolicy_UserOwnsArticle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(domain.Article))
	})
	return _c
}

func (_c *MockIArticlePolicy_UserOwnsArticle_Call) Return(_a0 bool) *MockIArticlePolicy_UserOwnsArticle_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIArticlePolicy_UserOwnsArticle_Call) RunAndReturn(run func(string, domain.Article) bool) *MockIArticlePolicy_UserOwnsArticle_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIArticlePolicy creates a new instance of MockIArticlePolicy. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIArticlePolicy(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIArticlePolicy {
	mock := &MockIArticlePolicy{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
