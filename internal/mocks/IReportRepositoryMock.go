// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "write_base/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// MockIReportRepository is an autogenerated mock type for the IReportRepository type
type MockIReportRepository struct {
	mock.Mock
}

type MockIReportRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIReportRepository) EXPECT() *MockIReportRepository_Expecter {
	return &MockIReportRepository_Expecter{mock: &_m.Mock}
}

// CreateReport provides a mock function with given fields: ctx, report
func (_m *MockIReportRepository) CreateReport(ctx context.Context, report *domain.Report) error {
	ret := _m.Called(ctx, report)

	if len(ret) == 0 {
		panic("no return value specified for CreateReport")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Report) error); ok {
		r0 = rf(ctx, report)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIReportRepository_CreateReport_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateReport'
type MockIReportRepository_CreateReport_Call struct {
	*mock.Call
}

// CreateReport is a helper method to define mock.On call
//   - ctx context.Context
//   - report *domain.Report
func (_e *MockIReportRepository_Expecter) CreateReport(ctx interface{}, report interface{}) *MockIReportRepository_CreateReport_Call {
	return &MockIReportRepository_CreateReport_Call{Call: _e.mock.On("CreateReport", ctx, report)}
}

func (_c *MockIReportRepository_CreateReport_Call) Run(run func(ctx context.Context, report *domain.Report)) *MockIReportRepository_CreateReport_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.Report))
	})
	return _c
}

func (_c *MockIReportRepository_CreateReport_Call) Return(_a0 error) *MockIReportRepository_CreateReport_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIReportRepository_CreateReport_Call) RunAndReturn(run func(context.Context, *domain.Report) error) *MockIReportRepository_CreateReport_Call {
	_c.Call.Return(run)
	return _c
}

// GetReports provides a mock function with given fields: ctx, filter
func (_m *MockIReportRepository) GetReports(ctx context.Context, filter map[string]interface{}) ([]*domain.Report, error) {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for GetReports")
	}

	var r0 []*domain.Report
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, map[string]interface{}) ([]*domain.Report, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, map[string]interface{}) []*domain.Report); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Report)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, map[string]interface{}) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIReportRepository_GetReports_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetReports'
type MockIReportRepository_GetReports_Call struct {
	*mock.Call
}

// GetReports is a helper method to define mock.On call
//   - ctx context.Context
//   - filter map[string]interface{}
func (_e *MockIReportRepository_Expecter) GetReports(ctx interface{}, filter interface{}) *MockIReportRepository_GetReports_Call {
	return &MockIReportRepository_GetReports_Call{Call: _e.mock.On("GetReports", ctx, filter)}
}

func (_c *MockIReportRepository_GetReports_Call) Run(run func(ctx context.Context, filter map[string]interface{})) *MockIReportRepository_GetReports_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(map[string]interface{}))
	})
	return _c
}

func (_c *MockIReportRepository_GetReports_Call) Return(_a0 []*domain.Report, _a1 error) *MockIReportRepository_GetReports_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIReportRepository_GetReports_Call) RunAndReturn(run func(context.Context, map[string]interface{}) ([]*domain.Report, error)) *MockIReportRepository_GetReports_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateReportStatus provides a mock function with given fields: ctx, reportID, status
func (_m *MockIReportRepository) UpdateReportStatus(ctx context.Context, reportID string, status domain.ReportStatus) error {
	ret := _m.Called(ctx, reportID, status)

	if len(ret) == 0 {
		panic("no return value specified for UpdateReportStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.ReportStatus) error); ok {
		r0 = rf(ctx, reportID, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIReportRepository_UpdateReportStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateReportStatus'
type MockIReportRepository_UpdateReportStatus_Call struct {
	*mock.Call
}

// UpdateReportStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - reportID string
//   - status domain.ReportStatus
func (_e *MockIReportRepository_Expecter) UpdateReportStatus(ctx interface{}, reportID interface{}, status interface{}) *MockIReportRepository_UpdateReportStatus_Call {
	return &MockIReportRepository_UpdateReportStatus_Call{Call: _e.mock.On("UpdateReportStatus", ctx, reportID, status)}
}

func (_c *MockIReportRepository_UpdateReportStatus_Call) Run(run func(ctx context.Context, reportID string, status domain.ReportStatus)) *MockIReportRepository_UpdateReportStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(domain.ReportStatus))
	})
	return _c
}

func (_c *MockIReportRepository_UpdateReportStatus_Call) Return(_a0 error) *MockIReportRepository_UpdateReportStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIReportRepository_UpdateReportStatus_Call) RunAndReturn(run func(context.Context, string, domain.ReportStatus) error) *MockIReportRepository_UpdateReportStatus_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIReportRepository creates a new instance of MockIReportRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIReportRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIReportRepository {
	mock := &MockIReportRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
