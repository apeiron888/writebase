// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"
	"write_base/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// NewMockIArticleUsecase creates a new instance of MockIArticleUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIArticleUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIArticleUsecase {
	mock := &MockIArticleUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockIArticleUsecase is an autogenerated mock type for the IArticleUsecase type
type MockIArticleUsecase struct {
	mock.Mock
}

type MockIArticleUsecase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIArticleUsecase) EXPECT() *MockIArticleUsecase_Expecter {
	return &MockIArticleUsecase_Expecter{mock: &_m.Mock}
}

// AdminHardDeleteArticle provides a mock function for the type MockIArticleUsecase
func (_mock *MockIArticleUsecase) AdminHardDeleteArticle(ctx context.Context, userID string, userRole string, articleID string) error {
	ret := _mock.Called(ctx, userID, userRole, articleID)

	if len(ret) == 0 {
		panic("no return value specified for AdminHardDeleteArticle")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = returnFunc(ctx, userID, userRole, articleID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockIArticleUsecase_AdminHardDeleteArticle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AdminHardDeleteArticle'
type MockIArticleUsecase_AdminHardDeleteArticle_Call struct {
	*mock.Call
}

// AdminHardDeleteArticle is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
//   - userRole string
//   - articleID string
func (_e *MockIArticleUsecase_Expecter) AdminHardDeleteArticle(ctx interface{}, userID interface{}, userRole interface{}, articleID interface{}) *MockIArticleUsecase_AdminHardDeleteArticle_Call {
	return &MockIArticleUsecase_AdminHardDeleteArticle_Call{Call: _e.mock.On("AdminHardDeleteArticle", ctx, userID, userRole, articleID)}
}

func (_c *MockIArticleUsecase_AdminHardDeleteArticle_Call) Run(run func(ctx context.Context, userID string, userRole string, articleID string)) *MockIArticleUsecase_AdminHardDeleteArticle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockIArticleUsecase_AdminHardDeleteArticle_Call) Return(err error) *MockIArticleUsecase_AdminHardDeleteArticle_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockIArticleUsecase_AdminHardDeleteArticle_Call) RunAndReturn(run func(ctx context.Context, userID string, userRole string, articleID string) error) *MockIArticleUsecase_AdminHardDeleteArticle_Call {
	_c.Call.Return(run)
	return _c
}

// AdminListAllArticles provides a mock function for the type MockIArticleUsecase
func (_mock *MockIArticleUsecase) AdminListAllArticles(ctx context.Context, userID string, userRole string, pag domain.Pagination) ([]domain.Article, int, error) {
	ret := _mock.Called(ctx, userID, userRole, pag)

	if len(ret) == 0 {
		panic("no return value specified for AdminListAllArticles")
	}

	var r0 []domain.Article
	var r1 int
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, domain.Pagination) ([]domain.Article, int, error)); ok {
		return returnFunc(ctx, userID, userRole, pag)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, domain.Pagination) []domain.Article); ok {
		r0 = returnFunc(ctx, userID, userRole, pag)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Article)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, domain.Pagination) int); ok {
		r1 = returnFunc(ctx, userID, userRole, pag)
	} else {
		r1 = ret.Get(1).(int)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, string, string, domain.Pagination) error); ok {
		r2 = returnFunc(ctx, userID, userRole, pag)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockIArticleUsecase_AdminListAllArticles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AdminListAllArticles'
type MockIArticleUsecase_AdminListAllArticles_Call struct {
	*mock.Call
}

// AdminListAllArticles is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
//   - userRole string
//   - pag domain.Pagination
func (_e *MockIArticleUsecase_Expecter) AdminListAllArticles(ctx interface{}, userID interface{}, userRole interface{}, pag interface{}) *MockIArticleUsecase_AdminListAllArticles_Call {
	return &MockIArticleUsecase_AdminListAllArticles_Call{Call: _e.mock.On("AdminListAllArticles", ctx, userID, userRole, pag)}
}

func (_c *MockIArticleUsecase_AdminListAllArticles_Call) Run(run func(ctx context.Context, userID string, userRole string, pag domain.Pagination)) *MockIArticleUsecase_AdminListAllArticles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 domain.Pagination
		if args[3] != nil {
			arg3 = args[3].(domain.Pagination)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockIArticleUsecase_AdminListAllArticles_Call) Return(articles []domain.Article, n int, err error) *MockIArticleUsecase_AdminListAllArticles_Call {
	_c.Call.Return(articles, n, err)
	return _c
}

func (_c *MockIArticleUsecase_AdminListAllArticles_Call) RunAndReturn(run func(ctx context.Context, userID string, userRole string, pag domain.Pagination) ([]domain.Article, int, error)) *MockIArticleUsecase_AdminListAllArticles_Call {
	_c.Call.Return(run)
	return _c
}

// AdminUnpublishArticle provides a mock function for the type MockIArticleUsecase
func (_mock *MockIArticleUsecase) AdminUnpublishArticle(ctx context.Context, userID string, userRole string, articleID string) (*domain.Article, error) {
	ret := _mock.Called(ctx, userID, userRole, articleID)

	if len(ret) == 0 {
		panic("no return value specified for AdminUnpublishArticle")
	}

	var r0 *domain.Article
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string) (*domain.Article, error)); ok {
		return returnFunc(ctx, userID, userRole, articleID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string) *domain.Article); ok {
		r0 = returnFunc(ctx, userID, userRole, articleID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Article)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = returnFunc(ctx, userID, userRole, articleID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIArticleUsecase_AdminUnpublishArticle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AdminUnpublishArticle'
type MockIArticleUsecase_AdminUnpublishArticle_Call struct {
	*mock.Call
}

// AdminUnpublishArticle is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
//   - userRole string
//   - articleID string
func (_e *MockIArticleUsecase_Expecter) AdminUnpublishArticle(ctx interface{}, userID interface{}, userRole interface{}, articleID interface{}) *MockIArticleUsecase_AdminUnpublishArticle_Call {
	return &MockIArticleUsecase_AdminUnpublishArticle_Call{Call: _e.mock.On("AdminUnpublishArticle", ctx, userID, userRole, articleID)}
}

func (_c *MockIArticleUsecase_AdminUnpublishArticle_Call) Run(run func(ctx context.Context, userID string, userRole string, articleID string)) *MockIArticleUsecase_AdminUnpublishArticle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockIArticleUsecase_AdminUnpublishArticle_Call) Return(article *domain.Article, err error) *MockIArticleUsecase_AdminUnpublishArticle_Call {
	_c.Call.Return(article, err)
	return _c
}

func (_c *MockIArticleUsecase_AdminUnpublishArticle_Call) RunAndReturn(run func(ctx context.Context, userID string, userRole string, articleID string) (*domain.Article, error)) *MockIArticleUsecase_AdminUnpublishArticle_Call {
	_c.Call.Return(run)
	return _c
}

// ArchiveArticle provides a mock function for the type MockIArticleUsecase
func (_mock *MockIArticleUsecase) ArchiveArticle(ctx context.Context, userID string, articleID string) (*domain.Article, error) {
	ret := _mock.Called(ctx, userID, articleID)

	if len(ret) == 0 {
		panic("no return value specified for ArchiveArticle")
	}

	var r0 *domain.Article
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (*domain.Article, error)); ok {
		return returnFunc(ctx, userID, articleID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) *domain.Article); ok {
		r0 = returnFunc(ctx, userID, articleID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Article)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, userID, articleID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIArticleUsecase_ArchiveArticle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ArchiveArticle'
type MockIArticleUsecase_ArchiveArticle_Call struct {
	*mock.Call
}

// ArchiveArticle is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
//   - articleID string
func (_e *MockIArticleUsecase_Expecter) ArchiveArticle(ctx interface{}, userID interface{}, articleID interface{}) *MockIArticleUsecase_ArchiveArticle_Call {
	return &MockIArticleUsecase_ArchiveArticle_Call{Call: _e.mock.On("ArchiveArticle", ctx, userID, articleID)}
}

func (_c *MockIArticleUsecase_ArchiveArticle_Call) Run(run func(ctx context.Context, userID string, articleID string)) *MockIArticleUsecase_ArchiveArticle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockIArticleUsecase_ArchiveArticle_Call) Return(article *domain.Article, err error) *MockIArticleUsecase_ArchiveArticle_Call {
	_c.Call.Return(article, err)
	return _c
}

func (_c *MockIArticleUsecase_ArchiveArticle_Call) RunAndReturn(run func(ctx context.Context, userID string, articleID string) (*domain.Article, error)) *MockIArticleUsecase_ArchiveArticle_Call {
	_c.Call.Return(run)
	return _c
}

// ClapArticle provides a mock function for the type MockIArticleUsecase
func (_mock *MockIArticleUsecase) ClapArticle(ctx context.Context, articleID string, userID string) (domain.ArticleStats, error) {
	ret := _mock.Called(ctx, articleID, userID)

	if len(ret) == 0 {
		panic("no return value specified for ClapArticle")
	}

	var r0 domain.ArticleStats
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (domain.ArticleStats, error)); ok {
		return returnFunc(ctx, articleID, userID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) domain.ArticleStats); ok {
		r0 = returnFunc(ctx, articleID, userID)
	} else {
		r0 = ret.Get(0).(domain.ArticleStats)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, articleID, userID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIArticleUsecase_ClapArticle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClapArticle'
type MockIArticleUsecase_ClapArticle_Call struct {
	*mock.Call
}

// ClapArticle is a helper method to define mock.On call
//   - ctx context.Context
//   - articleID string
//   - userID string
func (_e *MockIArticleUsecase_Expecter) ClapArticle(ctx interface{}, articleID interface{}, userID interface{}) *MockIArticleUsecase_ClapArticle_Call {
	return &MockIArticleUsecase_ClapArticle_Call{Call: _e.mock.On("ClapArticle", ctx, articleID, userID)}
}

func (_c *MockIArticleUsecase_ClapArticle_Call) Run(run func(ctx context.Context, articleID string, userID string)) *MockIArticleUsecase_ClapArticle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockIArticleUsecase_ClapArticle_Call) Return(articleStats domain.ArticleStats, err error) *MockIArticleUsecase_ClapArticle_Call {
	_c.Call.Return(articleStats, err)
	return _c
}

func (_c *MockIArticleUsecase_ClapArticle_Call) RunAndReturn(run func(ctx context.Context, articleID string, userID string) (domain.ArticleStats, error)) *MockIArticleUsecase_ClapArticle_Call {
	_c.Call.Return(run)
	return _c
}

// CreateArticle provides a mock function for the type MockIArticleUsecase
func (_mock *MockIArticleUsecase) CreateArticle(ctx context.Context, UserID string, input *domain.Article) (*domain.Article, error) {
	ret := _mock.Called(ctx, UserID, input)

	if len(ret) == 0 {
		panic("no return value specified for CreateArticle")
	}

	var r0 *domain.Article
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *domain.Article) (*domain.Article, error)); ok {
		return returnFunc(ctx, UserID, input)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *domain.Article) *domain.Article); ok {
		r0 = returnFunc(ctx, UserID, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Article)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, *domain.Article) error); ok {
		r1 = returnFunc(ctx, UserID, input)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIArticleUsecase_CreateArticle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateArticle'
type MockIArticleUsecase_CreateArticle_Call struct {
	*mock.Call
}

// CreateArticle is a helper method to define mock.On call
//   - ctx context.Context
//   - UserID string
//   - input *domain.Article
func (_e *MockIArticleUsecase_Expecter) CreateArticle(ctx interface{}, UserID interface{}, input interface{}) *MockIArticleUsecase_CreateArticle_Call {
	return &MockIArticleUsecase_CreateArticle_Call{Call: _e.mock.On("CreateArticle", ctx, UserID, input)}
}

func (_c *MockIArticleUsecase_CreateArticle_Call) Run(run func(ctx context.Context, UserID string, input *domain.Article)) *MockIArticleUsecase_CreateArticle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 *domain.Article
		if args[2] != nil {
			arg2 = args[2].(*domain.Article)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockIArticleUsecase_CreateArticle_Call) Return(article *domain.Article, err error) *MockIArticleUsecase_CreateArticle_Call {
	_c.Call.Return(article, err)
	return _c
}

func (_c *MockIArticleUsecase_CreateArticle_Call) RunAndReturn(run func(ctx context.Context, UserID string, input *domain.Article) (*domain.Article, error)) *MockIArticleUsecase_CreateArticle_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteArticle provides a mock function for the type MockIArticleUsecase
func (_mock *MockIArticleUsecase) DeleteArticle(ctx context.Context, userID string, articleID string) error {
	ret := _mock.Called(ctx, userID, articleID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteArticle")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = returnFunc(ctx, userID, articleID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockIArticleUsecase_DeleteArticle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteArticle'
type MockIArticleUsecase_DeleteArticle_Call struct {
	*mock.Call
}

// DeleteArticle is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
//   - articleID string
func (_e *MockIArticleUsecase_Expecter) DeleteArticle(ctx interface{}, userID interface{}, articleID interface{}) *MockIArticleUsecase_DeleteArticle_Call {
	return &MockIArticleUsecase_DeleteArticle_Call{Call: _e.mock.On("DeleteArticle", ctx, userID, articleID)}
}

func (_c *MockIArticleUsecase_DeleteArticle_Call) Run(run func(ctx context.Context, userID string, articleID string)) *MockIArticleUsecase_DeleteArticle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockIArticleUsecase_DeleteArticle_Call) Return(err error) *MockIArticleUsecase_DeleteArticle_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockIArticleUsecase_DeleteArticle_Call) RunAndReturn(run func(ctx context.Context, userID string, articleID string) error) *MockIArticleUsecase_DeleteArticle_Call {
	_c.Call.Return(run)
	return _c
}

// EmptyTrash provides a mock function for the type MockIArticleUsecase
func (_mock *MockIArticleUsecase) EmptyTrash(ctx context.Context, userID string) error {
	ret := _mock.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for EmptyTrash")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, userID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockIArticleUsecase_EmptyTrash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EmptyTrash'
type MockIArticleUsecase_EmptyTrash_Call struct {
	*mock.Call
}

// EmptyTrash is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
func (_e *MockIArticleUsecase_Expecter) EmptyTrash(ctx interface{}, userID interface{}) *MockIArticleUsecase_EmptyTrash_Call {
	return &MockIArticleUsecase_EmptyTrash_Call{Call: _e.mock.On("EmptyTrash", ctx, userID)}
}

func (_c *MockIArticleUsecase_EmptyTrash_Call) Run(run func(ctx context.Context, userID string)) *MockIArticleUsecase_EmptyTrash_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockIArticleUsecase_EmptyTrash_Call) Return(err error) *MockIArticleUsecase_EmptyTrash_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockIArticleUsecase_EmptyTrash_Call) RunAndReturn(run func(ctx context.Context, userID string) error) *MockIArticleUsecase_EmptyTrash_Call {
	_c.Call.Return(run)
	return _c
}

// FilterArticles provides a mock function for the type MockIArticleUsecase
func (_mock *MockIArticleUsecase) FilterArticles(ctx context.Context, userID string, filter domain.ArticleFilter, pag domain.Pagination) ([]domain.Article, int, error) {
	ret := _mock.Called(ctx, userID, filter, pag)

	if len(ret) == 0 {
		panic("no return value specified for FilterArticles")
	}

	var r0 []domain.Article
	var r1 int
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, domain.ArticleFilter, domain.Pagination) ([]domain.Article, int, error)); ok {
		return returnFunc(ctx, userID, filter, pag)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, domain.ArticleFilter, domain.Pagination) []domain.Article); ok {
		r0 = returnFunc(ctx, userID, filter, pag)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Article)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, domain.ArticleFilter, domain.Pagination) int); ok {
		r1 = returnFunc(ctx, userID, filter, pag)
	} else {
		r1 = ret.Get(1).(int)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, string, domain.ArticleFilter, domain.Pagination) error); ok {
		r2 = returnFunc(ctx, userID, filter, pag)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockIArticleUsecase_FilterArticles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FilterArticles'
type MockIArticleUsecase_FilterArticles_Call struct {
	*mock.Call
}

// FilterArticles is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
//   - filter domain.ArticleFilter
//   - pag domain.Pagination
func (_e *MockIArticleUsecase_Expecter) FilterArticles(ctx interface{}, userID interface{}, filter interface{}, pag interface{}) *MockIArticleUsecase_FilterArticles_Call {
	return &MockIArticleUsecase_FilterArticles_Call{Call: _e.mock.On("FilterArticles", ctx, userID, filter, pag)}
}

func (_c *MockIArticleUsecase_FilterArticles_Call) Run(run func(ctx context.Context, userID string, filter domain.ArticleFilter, pag domain.Pagination)) *MockIArticleUsecase_FilterArticles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 domain.ArticleFilter
		if args[2] != nil {
			arg2 = args[2].(domain.ArticleFilter)
		}
		var arg3 domain.Pagination
		if args[3] != nil {
			arg3 = args[3].(domain.Pagination)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockIArticleUsecase_FilterArticles_Call) Return(articles []domain.Article, n int, err error) *MockIArticleUsecase_FilterArticles_Call {
	_c.Call.Return(articles, n, err)
	return _c
}

func (_c *MockIArticleUsecase_FilterArticles_Call) RunAndReturn(run func(ctx context.Context, userID string, filter domain.ArticleFilter, pag domain.Pagination) ([]domain.Article, int, error)) *MockIArticleUsecase_FilterArticles_Call {
	_c.Call.Return(run)
	return _c
}

// GetArticleByID provides a mock function for the type MockIArticleUsecase
func (_mock *MockIArticleUsecase) GetArticleByID(ctx context.Context, viewerID string, articleID string, userRole string) (*domain.Article, error) {
	ret := _mock.Called(ctx, viewerID, articleID, userRole)

	if len(ret) == 0 {
		panic("no return value specified for GetArticleByID")
	}

	var r0 *domain.Article
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string) (*domain.Article, error)); ok {
		return returnFunc(ctx, viewerID, articleID, userRole)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string) *domain.Article); ok {
		r0 = returnFunc(ctx, viewerID, articleID, userRole)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Article)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = returnFunc(ctx, viewerID, articleID, userRole)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIArticleUsecase_GetArticleByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetArticleByID'
type MockIArticleUsecase_GetArticleByID_Call struct {
	*mock.Call
}

// GetArticleByID is a helper method to define mock.On call
//   - ctx context.Context
//   - viewerID string
//   - articleID string
//   - userRole string
func (_e *MockIArticleUsecase_Expecter) GetArticleByID(ctx interface{}, viewerID interface{}, articleID interface{}, userRole interface{}) *MockIArticleUsecase_GetArticleByID_Call {
	return &MockIArticleUsecase_GetArticleByID_Call{Call: _e.mock.On("GetArticleByID", ctx, viewerID, articleID, userRole)}
}

func (_c *MockIArticleUsecase_GetArticleByID_Call) Run(run func(ctx context.Context, viewerID string, articleID string, userRole string)) *MockIArticleUsecase_GetArticleByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockIArticleUsecase_GetArticleByID_Call) Return(article *domain.Article, err error) *MockIArticleUsecase_GetArticleByID_Call {
	_c.Call.Return(article, err)
	return _c
}

func (_c *MockIArticleUsecase_GetArticleByID_Call) RunAndReturn(run func(ctx context.Context, viewerID string, articleID string, userRole string) (*domain.Article, error)) *MockIArticleUsecase_GetArticleByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetArticleStats provides a mock function for the type MockIArticleUsecase
func (_mock *MockIArticleUsecase) GetArticleStats(ctx context.Context, articleID string) (domain.ArticleStats, error) {
	ret := _mock.Called(ctx, articleID)

	if len(ret) == 0 {
		panic("no return value specified for GetArticleStats")
	}

	var r0 domain.ArticleStats
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (domain.ArticleStats, error)); ok {
		return returnFunc(ctx, articleID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) domain.ArticleStats); ok {
		r0 = returnFunc(ctx, articleID)
	} else {
		r0 = ret.Get(0).(domain.ArticleStats)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, articleID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIArticleUsecase_GetArticleStats_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetArticleStats'
type MockIArticleUsecase_GetArticleStats_Call struct {
	*mock.Call
}

// GetArticleStats is a helper method to define mock.On call
//   - ctx context.Context
//   - articleID string
func (_e *MockIArticleUsecase_Expecter) GetArticleStats(ctx interface{}, articleID interface{}) *MockIArticleUsecase_GetArticleStats_Call {
	return &MockIArticleUsecase_GetArticleStats_Call{Call: _e.mock.On("GetArticleStats", ctx, articleID)}
}

func (_c *MockIArticleUsecase_GetArticleStats_Call) Run(run func(ctx context.Context, articleID string)) *MockIArticleUsecase_GetArticleStats_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockIArticleUsecase_GetArticleStats_Call) Return(articleStats domain.ArticleStats, err error) *MockIArticleUsecase_GetArticleStats_Call {
	_c.Call.Return(articleStats, err)
	return _c
}

func (_c *MockIArticleUsecase_GetArticleStats_Call) RunAndReturn(run func(ctx context.Context, articleID string) (domain.ArticleStats, error)) *MockIArticleUsecase_GetArticleStats_Call {
	_c.Call.Return(run)
	return _c
}

// ListArticlesByTag provides a mock function for the type MockIArticleUsecase
func (_mock *MockIArticleUsecase) ListArticlesByTag(ctx context.Context, userID string, tag string, pag domain.Pagination) ([]domain.Article, int, error) {
	ret := _mock.Called(ctx, userID, tag, pag)

	if len(ret) == 0 {
		panic("no return value specified for ListArticlesByTag")
	}

	var r0 []domain.Article
	var r1 int
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, domain.Pagination) ([]domain.Article, int, error)); ok {
		return returnFunc(ctx, userID, tag, pag)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, domain.Pagination) []domain.Article); ok {
		r0 = returnFunc(ctx, userID, tag, pag)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Article)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, domain.Pagination) int); ok {
		r1 = returnFunc(ctx, userID, tag, pag)
	} else {
		r1 = ret.Get(1).(int)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, string, string, domain.Pagination) error); ok {
		r2 = returnFunc(ctx, userID, tag, pag)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockIArticleUsecase_ListArticlesByTag_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListArticlesByTag'
type MockIArticleUsecase_ListArticlesByTag_Call struct {
	*mock.Call
}

// ListArticlesByTag is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
//   - tag string
//   - pag domain.Pagination
func (_e *MockIArticleUsecase_Expecter) ListArticlesByTag(ctx interface{}, userID interface{}, tag interface{}, pag interface{}) *MockIArticleUsecase_ListArticlesByTag_Call {
	return &MockIArticleUsecase_ListArticlesByTag_Call{Call: _e.mock.On("ListArticlesByTag", ctx, userID, tag, pag)}
}

func (_c *MockIArticleUsecase_ListArticlesByTag_Call) Run(run func(ctx context.Context, userID string, tag string, pag domain.Pagination)) *MockIArticleUsecase_ListArticlesByTag_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 domain.Pagination
		if args[3] != nil {
			arg3 = args[3].(domain.Pagination)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockIArticleUsecase_ListArticlesByTag_Call) Return(articles []domain.Article, n int, err error) *MockIArticleUsecase_ListArticlesByTag_Call {
	_c.Call.Return(articles, n, err)
	return _c
}

func (_c *MockIArticleUsecase_ListArticlesByTag_Call) RunAndReturn(run func(ctx context.Context, userID string, tag string, pag domain.Pagination) ([]domain.Article, int, error)) *MockIArticleUsecase_ListArticlesByTag_Call {
	_c.Call.Return(run)
	return _c
}

// ListTrendingArticles provides a mock function for the type MockIArticleUsecase
func (_mock *MockIArticleUsecase) ListTrendingArticles(ctx context.Context, pag domain.Pagination, windowDays int) ([]domain.Article, int, error) {
	ret := _mock.Called(ctx, pag, windowDays)

	if len(ret) == 0 {
		panic("no return value specified for ListTrendingArticles")
	}

	var r0 []domain.Article
	var r1 int
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.Pagination, int) ([]domain.Article, int, error)); ok {
		return returnFunc(ctx, pag, windowDays)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.Pagination, int) []domain.Article); ok {
		r0 = returnFunc(ctx, pag, windowDays)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Article)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.Pagination, int) int); ok {
		r1 = returnFunc(ctx, pag, windowDays)
	} else {
		r1 = ret.Get(1).(int)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, domain.Pagination, int) error); ok {
		r2 = returnFunc(ctx, pag, windowDays)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockIArticleUsecase_ListTrendingArticles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListTrendingArticles'
type MockIArticleUsecase_ListTrendingArticles_Call struct {
	*mock.Call
}

// ListTrendingArticles is a helper method to define mock.On call
//   - ctx context.Context
//   - pag domain.Pagination
//   - windowDays int
func (_e *MockIArticleUsecase_Expecter) ListTrendingArticles(ctx interface{}, pag interface{}, windowDays interface{}) *MockIArticleUsecase_ListTrendingArticles_Call {
	return &MockIArticleUsecase_ListTrendingArticles_Call{Call: _e.mock.On("ListTrendingArticles", ctx, pag, windowDays)}
}

func (_c *MockIArticleUsecase_ListTrendingArticles_Call) Run(run func(ctx context.Context, pag domain.Pagination, windowDays int)) *MockIArticleUsecase_ListTrendingArticles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.Pagination
		if args[1] != nil {
			arg1 = args[1].(domain.Pagination)
		}
		var arg2 int
		if args[2] != nil {
			arg2 = args[2].(int)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockIArticleUsecase_ListTrendingArticles_Call) Return(articles []domain.Article, n int, err error) *MockIArticleUsecase_ListTrendingArticles_Call {
	_c.Call.Return(articles, n, err)
	return _c
}

func (_c *MockIArticleUsecase_ListTrendingArticles_Call) RunAndReturn(run func(ctx context.Context, pag domain.Pagination, windowDays int) ([]domain.Article, int, error)) *MockIArticleUsecase_ListTrendingArticles_Call {
	_c.Call.Return(run)
	return _c
}

// ListUserArticles provides a mock function for the type MockIArticleUsecase
func (_mock *MockIArticleUsecase) ListUserArticles(ctx context.Context, userID string, authorID string, pag domain.Pagination) ([]domain.Article, int, error) {
	ret := _mock.Called(ctx, userID, authorID, pag)

	if len(ret) == 0 {
		panic("no return value specified for ListUserArticles")
	}

	var r0 []domain.Article
	var r1 int
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, domain.Pagination) ([]domain.Article, int, error)); ok {
		return returnFunc(ctx, userID, authorID, pag)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, domain.Pagination) []domain.Article); ok {
		r0 = returnFunc(ctx, userID, authorID, pag)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Article)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, domain.Pagination) int); ok {
		r1 = returnFunc(ctx, userID, authorID, pag)
	} else {
		r1 = ret.Get(1).(int)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, string, string, domain.Pagination) error); ok {
		r2 = returnFunc(ctx, userID, authorID, pag)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockIArticleUsecase_ListUserArticles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListUserArticles'
type MockIArticleUsecase_ListUserArticles_Call struct {
	*mock.Call
}

// ListUserArticles is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
//   - authorID string
//   - pag domain.Pagination
func (_e *MockIArticleUsecase_Expecter) ListUserArticles(ctx interface{}, userID interface{}, authorID interface{}, pag interface{}) *MockIArticleUsecase_ListUserArticles_Call {
	return &MockIArticleUsecase_ListUserArticles_Call{Call: _e.mock.On("ListUserArticles", ctx, userID, authorID, pag)}
}

func (_c *MockIArticleUsecase_ListUserArticles_Call) Run(run func(ctx context.Context, userID string, authorID string, pag domain.Pagination)) *MockIArticleUsecase_ListUserArticles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 domain.Pagination
		if args[3] != nil {
			arg3 = args[3].(domain.Pagination)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockIArticleUsecase_ListUserArticles_Call) Return(articles []domain.Article, n int, err error) *MockIArticleUsecase_ListUserArticles_Call {
	_c.Call.Return(articles, n, err)
	return _c
}

func (_c *MockIArticleUsecase_ListUserArticles_Call) RunAndReturn(run func(ctx context.Context, userID string, authorID string, pag domain.Pagination) ([]domain.Article, int, error)) *MockIArticleUsecase_ListUserArticles_Call {
	_c.Call.Return(run)
	return _c
}

// PublishArticle provides a mock function for the type MockIArticleUsecase
func (_mock *MockIArticleUsecase) PublishArticle(ctx context.Context, userID string, articleID string) (*domain.Article, error) {
	ret := _mock.Called(ctx, userID, articleID)

	if len(ret) == 0 {
		panic("no return value specified for PublishArticle")
	}

	var r0 *domain.Article
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (*domain.Article, error)); ok {
		return returnFunc(ctx, userID, articleID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) *domain.Article); ok {
		r0 = returnFunc(ctx, userID, articleID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Article)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, userID, articleID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIArticleUsecase_PublishArticle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PublishArticle'
type MockIArticleUsecase_PublishArticle_Call struct {
	*mock.Call
}

// PublishArticle is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
//   - articleID string
func (_e *MockIArticleUsecase_Expecter) PublishArticle(ctx interface{}, userID interface{}, articleID interface{}) *MockIArticleUsecase_PublishArticle_Call {
	return &MockIArticleUsecase_PublishArticle_Call{Call: _e.mock.On("PublishArticle", ctx, userID, articleID)}
}

func (_c *MockIArticleUsecase_PublishArticle_Call) Run(run func(ctx context.Context, userID string, articleID string)) *MockIArticleUsecase_PublishArticle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockIArticleUsecase_PublishArticle_Call) Return(article *domain.Article, err error) *MockIArticleUsecase_PublishArticle_Call {
	_c.Call.Return(article, err)
	return _c
}

func (_c *MockIArticleUsecase_PublishArticle_Call) RunAndReturn(run func(ctx context.Context, userID string, articleID string) (*domain.Article, error)) *MockIArticleUsecase_PublishArticle_Call {
	_c.Call.Return(run)
	return _c
}

// RestoreArticle provides a mock function for the type MockIArticleUsecase
func (_mock *MockIArticleUsecase) RestoreArticle(ctx context.Context, userID string, articleID string) (*domain.Article, error) {
	ret := _mock.Called(ctx, userID, articleID)

	if len(ret) == 0 {
		panic("no return value specified for RestoreArticle")
	}

	var r0 *domain.Article
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (*domain.Article, error)); ok {
		return returnFunc(ctx, userID, articleID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) *domain.Article); ok {
		r0 = returnFunc(ctx, userID, articleID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Article)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, userID, articleID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIArticleUsecase_RestoreArticle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RestoreArticle'
type MockIArticleUsecase_RestoreArticle_Call struct {
	*mock.Call
}

// RestoreArticle is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
//   - articleID string
func (_e *MockIArticleUsecase_Expecter) RestoreArticle(ctx interface{}, userID interface{}, articleID interface{}) *MockIArticleUsecase_RestoreArticle_Call {
	return &MockIArticleUsecase_RestoreArticle_Call{Call: _e.mock.On("RestoreArticle", ctx, userID, articleID)}
}

func (_c *MockIArticleUsecase_RestoreArticle_Call) Run(run func(ctx context.Context, userID string, articleID string)) *MockIArticleUsecase_RestoreArticle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockIArticleUsecase_RestoreArticle_Call) Return(article *domain.Article, err error) *MockIArticleUsecase_RestoreArticle_Call {
	_c.Call.Return(article, err)
	return _c
}

func (_c *MockIArticleUsecase_RestoreArticle_Call) RunAndReturn(run func(ctx context.Context, userID string, articleID string) (*domain.Article, error)) *MockIArticleUsecase_RestoreArticle_Call {
	_c.Call.Return(run)
	return _c
}

// SearchArticles provides a mock function for the type MockIArticleUsecase
func (_mock *MockIArticleUsecase) SearchArticles(ctx context.Context, userID string, query string, pag domain.Pagination) ([]domain.Article, int, error) {
	ret := _mock.Called(ctx, userID, query, pag)

	if len(ret) == 0 {
		panic("no return value specified for SearchArticles")
	}

	var r0 []domain.Article
	var r1 int
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, domain.Pagination) ([]domain.Article, int, error)); ok {
		return returnFunc(ctx, userID, query, pag)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, domain.Pagination) []domain.Article); ok {
		r0 = returnFunc(ctx, userID, query, pag)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Article)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, domain.Pagination) int); ok {
		r1 = returnFunc(ctx, userID, query, pag)
	} else {
		r1 = ret.Get(1).(int)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, string, string, domain.Pagination) error); ok {
		r2 = returnFunc(ctx, userID, query, pag)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockIArticleUsecase_SearchArticles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SearchArticles'
type MockIArticleUsecase_SearchArticles_Call struct {
	*mock.Call
}

// SearchArticles is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
//   - query string
//   - pag domain.Pagination
func (_e *MockIArticleUsecase_Expecter) SearchArticles(ctx interface{}, userID interface{}, query interface{}, pag interface{}) *MockIArticleUsecase_SearchArticles_Call {
	return &MockIArticleUsecase_SearchArticles_Call{Call: _e.mock.On("SearchArticles", ctx, userID, query, pag)}
}

func (_c *MockIArticleUsecase_SearchArticles_Call) Run(run func(ctx context.Context, userID string, query string, pag domain.Pagination)) *MockIArticleUsecase_SearchArticles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 domain.Pagination
		if args[3] != nil {
			arg3 = args[3].(domain.Pagination)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockIArticleUsecase_SearchArticles_Call) Return(articles []domain.Article, n int, err error) *MockIArticleUsecase_SearchArticles_Call {
	_c.Call.Return(articles, n, err)
	return _c
}

func (_c *MockIArticleUsecase_SearchArticles_Call) RunAndReturn(run func(ctx context.Context, userID string, query string, pag domain.Pagination) ([]domain.Article, int, error)) *MockIArticleUsecase_SearchArticles_Call {
	_c.Call.Return(run)
	return _c
}

// UnarchiveArticle provides a mock function for the type MockIArticleUsecase
func (_mock *MockIArticleUsecase) UnarchiveArticle(ctx context.Context, userID string, articleID string) (*domain.Article, error) {
	ret := _mock.Called(ctx, userID, articleID)

	if len(ret) == 0 {
		panic("no return value specified for UnarchiveArticle")
	}

	var r0 *domain.Article
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (*domain.Article, error)); ok {
		return returnFunc(ctx, userID, articleID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) *domain.Article); ok {
		r0 = returnFunc(ctx, userID, articleID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Article)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, userID, articleID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIArticleUsecase_UnarchiveArticle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnarchiveArticle'
type MockIArticleUsecase_UnarchiveArticle_Call struct {
	*mock.Call
}

// UnarchiveArticle is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
//   - articleID string
func (_e *MockIArticleUsecase_Expecter) UnarchiveArticle(ctx interface{}, userID interface{}, articleID interface{}) *MockIArticleUsecase_UnarchiveArticle_Call {
	return &MockIArticleUsecase_UnarchiveArticle_Call{Call: _e.mock.On("UnarchiveArticle", ctx, userID, articleID)}
}

func (_c *MockIArticleUsecase_UnarchiveArticle_Call) Run(run func(ctx context.Context, userID string, articleID string)) *MockIArticleUsecase_UnarchiveArticle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockIArticleUsecase_UnarchiveArticle_Call) Return(article *domain.Article, err error) *MockIArticleUsecase_UnarchiveArticle_Call {
	_c.Call.Return(article, err)
	return _c
}

func (_c *MockIArticleUsecase_UnarchiveArticle_Call) RunAndReturn(run func(ctx context.Context, userID string, articleID string) (*domain.Article, error)) *MockIArticleUsecase_UnarchiveArticle_Call {
	_c.Call.Return(run)
	return _c
}

// UnpublishArticle provides a mock function for the type MockIArticleUsecase
func (_mock *MockIArticleUsecase) UnpublishArticle(ctx context.Context, userID string, articleID string, force bool) (*domain.Article, error) {
	ret := _mock.Called(ctx, userID, articleID, force)

	if len(ret) == 0 {
		panic("no return value specified for UnpublishArticle")
	}

	var r0 *domain.Article
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, bool) (*domain.Article, error)); ok {
		return returnFunc(ctx, userID, articleID, force)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, bool) *domain.Article); ok {
		r0 = returnFunc(ctx, userID, articleID, force)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Article)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, bool) error); ok {
		r1 = returnFunc(ctx, userID, articleID, force)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIArticleUsecase_UnpublishArticle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnpublishArticle'
type MockIArticleUsecase_UnpublishArticle_Call struct {
	*mock.Call
}

// UnpublishArticle is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
//   - articleID string
//   - force bool
func (_e *MockIArticleUsecase_Expecter) UnpublishArticle(ctx interface{}, userID interface{}, articleID interface{}, force interface{}) *MockIArticleUsecase_UnpublishArticle_Call {
	return &MockIArticleUsecase_UnpublishArticle_Call{Call: _e.mock.On("UnpublishArticle", ctx, userID, articleID, force)}
}

func (_c *MockIArticleUsecase_UnpublishArticle_Call) Run(run func(ctx context.Context, userID string, articleID string, force bool)) *MockIArticleUsecase_UnpublishArticle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 bool
		if args[3] != nil {
			arg3 = args[3].(bool)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockIArticleUsecase_UnpublishArticle_Call) Return(article *domain.Article, err error) *MockIArticleUsecase_UnpublishArticle_Call {
	_c.Call.Return(article, err)
	return _c
}

func (_c *MockIArticleUsecase_UnpublishArticle_Call) RunAndReturn(run func(ctx context.Context, userID string, articleID string, force bool) (*domain.Article, error)) *MockIArticleUsecase_UnpublishArticle_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateArticle provides a mock function for the type MockIArticleUsecase
func (_mock *MockIArticleUsecase) UpdateArticle(ctx context.Context, UserID string, input *domain.Article) (*domain.Article, error) {
	ret := _mock.Called(ctx, UserID, input)

	if len(ret) == 0 {
		panic("no return value specified for UpdateArticle")
	}

	var r0 *domain.Article
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *domain.Article) (*domain.Article, error)); ok {
		return returnFunc(ctx, UserID, input)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *domain.Article) *domain.Article); ok {
		r0 = returnFunc(ctx, UserID, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Article)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, *domain.Article) error); ok {
		r1 = returnFunc(ctx, UserID, input)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIArticleUsecase_UpdateArticle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateArticle'
type MockIArticleUsecase_UpdateArticle_Call struct {
	*mock.Call
}

// UpdateArticle is a helper method to define mock.On call
//   - ctx context.Context
//   - UserID string
//   - input *domain.Article
func (_e *MockIArticleUsecase_Expecter) UpdateArticle(ctx interface{}, UserID interface{}, input interface{}) *MockIArticleUsecase_UpdateArticle_Call {
	return &MockIArticleUsecase_UpdateArticle_Call{Call: _e.mock.On("UpdateArticle", ctx, UserID, input)}
}

func (_c *MockIArticleUsecase_UpdateArticle_Call) Run(run func(ctx context.Context, UserID string, input *domain.Article)) *MockIArticleUsecase_UpdateArticle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 *domain.Article
		if args[2] != nil {
			arg2 = args[2].(*domain.Article)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockIArticleUsecase_UpdateArticle_Call) Return(article *domain.Article, err error) *MockIArticleUsecase_UpdateArticle_Call {
	_c.Call.Return(article, err)
	return _c
}

func (_c *MockIArticleUsecase_UpdateArticle_Call) RunAndReturn(run func(ctx context.Context, UserID string, input *domain.Article) (*domain.Article, error)) *MockIArticleUsecase_UpdateArticle_Call {
	_c.Call.Return(run)
	return _c
}

// ViewArticleBySlug provides a mock function for the type MockIArticleUsecase
func (_mock *MockIArticleUsecase) ViewArticleBySlug(ctx context.Context, slug string, clientIP string) (*domain.Article, error) {
	ret := _mock.Called(ctx, slug, clientIP)

	if len(ret) == 0 {
		panic("no return value specified for ViewArticleBySlug")
	}

	var r0 *domain.Article
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (*domain.Article, error)); ok {
		return returnFunc(ctx, slug, clientIP)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) *domain.Article); ok {
		r0 = returnFunc(ctx, slug, clientIP)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Article)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, slug, clientIP)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIArticleUsecase_ViewArticleBySlug_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ViewArticleBySlug'
type MockIArticleUsecase_ViewArticleBySlug_Call struct {
	*mock.Call
}

// ViewArticleBySlug is a helper method to define mock.On call
//   - ctx context.Context
//   - slug string
//   - clientIP string
func (_e *MockIArticleUsecase_Expecter) ViewArticleBySlug(ctx interface{}, slug interface{}, clientIP interface{}) *MockIArticleUsecase_ViewArticleBySlug_Call {
	return &MockIArticleUsecase_ViewArticleBySlug_Call{Call: _e.mock.On("ViewArticleBySlug", ctx, slug, clientIP)}
}

func (_c *MockIArticleUsecase_ViewArticleBySlug_Call) Run(run func(ctx context.Context, slug string, clientIP string)) *MockIArticleUsecase_ViewArticleBySlug_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockIArticleUsecase_ViewArticleBySlug_Call) Return(article *domain.Article, err error) *MockIArticleUsecase_ViewArticleBySlug_Call {
	_c.Call.Return(article, err)
	return _c
}

func (_c *MockIArticleUsecase_ViewArticleBySlug_Call) RunAndReturn(run func(ctx context.Context, slug string, clientIP string) (*domain.Article, error)) *MockIArticleUsecase_ViewArticleBySlug_Call {
	_c.Call.Return(run)
	return _c
}
