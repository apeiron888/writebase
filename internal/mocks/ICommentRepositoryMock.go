// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "write_base/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// MockICommentRepository is an autogenerated mock type for the ICommentRepository type
type MockICommentRepository struct {
	mock.Mock
}

type MockICommentRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockICommentRepository) EXPECT() *MockICommentRepository_Expecter {
	return &MockICommentRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, comment
func (_m *MockICommentRepository) Create(ctx context.Context, comment *domain.Comment) error {
	ret := _m.Called(ctx, comment)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Comment) error); ok {
		r0 = rf(ctx, comment)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockICommentRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockICommentRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - comment *domain.Comment
func (_e *MockICommentRepository_Expecter) Create(ctx interface{}, comment interface{}) *MockICommentRepository_Create_Call {
	return &MockICommentRepository_Create_Call{Call: _e.mock.On("Create", ctx, comment)}
}

func (_c *MockICommentRepository_Create_Call) Run(run func(ctx context.Context, comment *domain.Comment)) *MockICommentRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.Comment))
	})
	return _c
}

func (_c *MockICommentRepository_Create_Call) Return(_a0 error) *MockICommentRepository_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockICommentRepository_Create_Call) RunAndReturn(run func(context.Context, *domain.Comment) error) *MockICommentRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, commentID
func (_m *MockICommentRepository) Delete(ctx context.Context, commentID string) error {
	ret := _m.Called(ctx, commentID)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, commentID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockICommentRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockICommentRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - commentID string
func (_e *MockICommentRepository_Expecter) Delete(ctx interface{}, commentID interface{}) *MockICommentRepository_Delete_Call {
	return &MockICommentRepository_Delete_Call{Call: _e.mock.On("Delete", ctx, commentID)}
}

func (_c *MockICommentRepository_Delete_Call) Run(run func(ctx context.Context, commentID string)) *MockICommentRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockICommentRepository_Delete_Call) Return(_a0 error) *MockICommentRepository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockICommentRepository_Delete_Call) RunAndReturn(run func(context.Context, string) error) *MockICommentRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: ctx, commentID
func (_m *MockICommentRepository) GetByID(ctx context.Context, commentID string) (*domain.Comment, error) {
	ret := _m.Called(ctx, commentID)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *domain.Comment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.Comment, error)); ok {
		return rf(ctx, commentID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.Comment); ok {
		r0 = rf(ctx, commentID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Comment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, commentID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockICommentRepository_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockICommentRepository_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - commentID string
func (_e *MockICommentRepository_Expecter) GetByID(ctx interface{}, commentID interface{}) *MockICommentRepository_GetByID_Call {
	return &MockICommentRepository_GetByID_Call{Call: _e.mock.On("GetByID", ctx, commentID)}
}

func (_c *MockICommentRepository_GetByID_Call) Run(run func(ctx context.Context, commentID string)) *MockICommentRepository_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockICommentRepository_GetByID_Call) Return(_a0 *domain.Comment, _a1 error) *MockICommentRepository_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockICommentRepository_GetByID_Call) RunAndReturn(run func(context.Context, string) (*domain.Comment, error)) *MockICommentRepository_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetByPostID provides a mock function with given fields: ctx, postID
func (_m *MockICommentRepository) GetByPostID(ctx context.Context, postID string) ([]*domain.Comment, error) {
	ret := _m.Called(ctx, postID)

	if len(ret) == 0 {
		panic("no return value specified for GetByPostID")
	}

	var r0 []*domain.Comment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*domain.Comment, error)); ok {
		return rf(ctx, postID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*domain.Comment); ok {
		r0 = rf(ctx, postID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Comment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, postID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockICommentRepository_GetByPostID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByPostID'
type MockICommentRepository_GetByPostID_Call struct {
	*mock.Call
}

// GetByPostID is a helper method to define mock.On call
//   - ctx context.Context
//   - postID string
func (_e *MockICommentRepository_Expecter) GetByPostID(ctx interface{}, postID interface{}) *MockICommentRepository_GetByPostID_Call {
	return &MockICommentRepository_GetByPostID_Call{Call: _e.mock.On("GetByPostID", ctx, postID)}
}

func (_c *MockICommentRepository_GetByPostID_Call) Run(run func(ctx context.Context, postID string)) *MockICommentRepository_GetByPostID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockICommentRepository_GetByPostID_Call) Return(_a0 []*domain.Comment, _a1 error) *MockICommentRepository_GetByPostID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockICommentRepository_GetByPostID_Call) RunAndReturn(run func(context.Context, string) ([]*domain.Comment, error)) *MockICommentRepository_GetByPostID_Call {
	_c.Call.Return(run)
	return _c
}

// GetByUserID provides a mock function with given fields: ctx, userID
func (_m *MockICommentRepository) GetByUserID(ctx context.Context, userID string) ([]*domain.Comment, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetByUserID")
	}

	var r0 []*domain.Comment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*domain.Comment, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*domain.Comment); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Comment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockICommentRepository_GetByUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByUserID'
type MockICommentRepository_GetByUserID_Call struct {
	*mock.Call
}

// GetByUserID is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
func (_e *MockICommentRepository_Expecter) GetByUserID(ctx interface{}, userID interface{}) *MockICommentRepository_GetByUserID_Call {
	return &MockICommentRepository_GetByUserID_Call{Call: _e.mock.On("GetByUserID", ctx, userID)}
}

func (_c *MockICommentRepository_GetByUserID_Call) Run(run func(ctx context.Context, userID string)) *MockICommentRepository_GetByUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockICommentRepository_GetByUserID_Call) Return(_a0 []*domain.Comment, _a1 error) *MockICommentRepository_GetByUserID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockICommentRepository_GetByUserID_Call) RunAndReturn(run func(context.Context, string) ([]*domain.Comment, error)) *MockICommentRepository_GetByUserID_Call {
	_c.Call.Return(run)
	return _c
}

// GetReplies provides a mock function with given fields: ctx, parentID
func (_m *MockICommentRepository) GetReplies(ctx context.Context, parentID string) ([]*domain.Comment, error) {
	ret := _m.Called(ctx, parentID)

	if len(ret) == 0 {
		panic("no return value specified for GetReplies")
	}

	var r0 []*domain.Comment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*domain.Comment, error)); ok {
		return rf(ctx, parentID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*domain.Comment); ok {
		r0 = rf(ctx, parentID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Comment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, parentID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockICommentRepository_GetReplies_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetReplies'
type MockICommentRepository_GetReplies_Call struct {
	*mock.Call
}

// GetReplies is a helper method to define mock.On call
//   - ctx context.Context
//   - parentID string
func (_e *MockICommentRepository_Expecter) GetReplies(ctx interface{}, parentID interface{}) *MockICommentRepository_GetReplies_Call {
	return &MockICommentRepository_GetReplies_Call{Call: _e.mock.On("GetReplies", ctx, parentID)}
}

func (_c *MockICommentRepository_GetReplies_Call) Run(run func(ctx context.Context, parentID string)) *MockICommentRepository_GetReplies_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockICommentRepository_GetReplies_Call) Return(_a0 []*domain.Comment, _a1 error) *MockICommentRepository_GetReplies_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockICommentRepository_GetReplies_Call) RunAndReturn(run func(context.Context, string) ([]*domain.Comment, error)) *MockICommentRepository_GetReplies_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, comment
func (_m *MockICommentRepository) Update(ctx context.Context, comment *domain.Comment) error {
	ret := _m.Called(ctx, comment)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Comment) error); ok {
		r0 = rf(ctx, comment)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockICommentRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockICommentRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - comment *domain.Comment
func (_e *MockICommentRepository_Expecter) Update(ctx interface{}, comment interface{}) *MockICommentRepository_Update_Call {
	return &MockICommentRepository_Update_Call{Call: _e.mock.On("Update", ctx, comment)}
}

func (_c *MockICommentRepository_Update_Call) Run(run func(ctx context.Context, comment *domain.Comment)) *MockICommentRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.Comment))
	})
	return _c
}

func (_c *MockICommentRepository_Update_Call) Return(_a0 error) *MockICommentRepository_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockICommentRepository_Update_Call) RunAndReturn(run func(context.Context, *domain.Comment) error) *MockICommentRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockICommentRepository creates a new instance of MockICommentRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockICommentRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockICommentRepository {
	mock := &MockICommentRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
