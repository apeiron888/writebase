// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "write_base/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// MockIReactionRepository is an autogenerated mock type for the IReactionRepository type
type MockIReactionRepository struct {
	mock.Mock
}

type MockIReactionRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIReactionRepository) EXPECT() *MockIReactionRepository_Expecter {
	return &MockIReactionRepository_Expecter{mock: &_m.Mock}
}

// AddReaction provides a mock function with given fields: ctx, reaction
func (_m *MockIReactionRepository) AddReaction(ctx context.Context, reaction *domain.Reaction) error {
	ret := _m.Called(ctx, reaction)

	if len(ret) == 0 {
		panic("no return value specified for AddReaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Reaction) error); ok {
		r0 = rf(ctx, reaction)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIReactionRepository_AddReaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddReaction'
type MockIReactionRepository_AddReaction_Call struct {
	*mock.Call
}

// AddReaction is a helper method to define mock.On call
//   - ctx context.Context
//   - reaction *domain.Reaction
func (_e *MockIReactionRepository_Expecter) AddReaction(ctx interface{}, reaction interface{}) *MockIReactionRepository_AddReaction_Call {
	return &MockIReactionRepository_AddReaction_Call{Call: _e.mock.On("AddReaction", ctx, reaction)}
}

func (_c *MockIReactionRepository_AddReaction_Call) Run(run func(ctx context.Context, reaction *domain.Reaction)) *MockIReactionRepository_AddReaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.Reaction))
	})
	return _c
}

func (_c *MockIReactionRepository_AddReaction_Call) Return(_a0 error) *MockIReactionRepository_AddReaction_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIReactionRepository_AddReaction_Call) RunAndReturn(run func(context.Context, *domain.Reaction) error) *MockIReactionRepository_AddReaction_Call {
	_c.Call.Return(run)
	return _c
}

// CountReactions provides a mock function with given fields: ctx, postID, reactionType
func (_m *MockIReactionRepository) CountReactions(ctx context.Context, postID string, reactionType domain.ReactionType) (int, error) {
	ret := _m.Called(ctx, postID, reactionType)

	if len(ret) == 0 {
		panic("no return value specified for CountReactions")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.ReactionType) (int, error)); ok {
		return rf(ctx, postID, reactionType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.ReactionType) int); ok {
		r0 = rf(ctx, postID, reactionType)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, domain.ReactionType) error); ok {
		r1 = rf(ctx, postID, reactionType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIReactionRepository_CountReactions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountReactions'
type MockIReactionRepository_CountReactions_Call struct {
	*mock.Call
}

// CountReactions is a helper method to define mock.On call
//   - ctx context.Context
//   - postID string
//   - reactionType domain.ReactionType
func (_e *MockIReactionRepository_Expecter) CountReactions(ctx interface{}, postID interface{}, reactionType interface{}) *MockIReactionRepository_CountReactions_Call {
	return &MockIReactionRepository_CountReactions_Call{Call: _e.mock.On("CountReactions", ctx, postID, reactionType)}
}

func (_c *MockIReactionRepository_CountReactions_Call) Run(run func(ctx context.Context, postID string, reactionType domain.ReactionType)) *MockIReactionRepository_CountReactions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(domain.ReactionType))
	})
	return _c
}

func (_c *MockIReactionRepository_CountReactions_Call) Return(_a0 int, _a1 error) *MockIReactionRepository_CountReactions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIReactionRepository_CountReactions_Call) RunAndReturn(run func(context.Context, string, domain.ReactionType) (int, error)) *MockIReactionRepository_CountReactions_Call {
	_c.Call.Return(run)
	return _c
}

// GetReactionsByPost provides a mock function with given fields: ctx, postID
func (_m *MockIReactionRepository) GetReactionsByPost(ctx context.Context, postID string) ([]*domain.Reaction, error) {
	ret := _m.Called(ctx, postID)

	if len(ret) == 0 {
		panic("no return value specified for GetReactionsByPost")
	}

	var r0 []*domain.Reaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*domain.Reaction, error)); ok {
		return rf(ctx, postID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*domain.Reaction); ok {
		r0 = rf(ctx, postID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Reaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, postID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIReactionRepository_GetReactionsByPost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetReactionsByPost'
type MockIReactionRepository_GetReactionsByPost_Call struct {
	*mock.Call
}

// GetReactionsByPost is a helper method to define mock.On call
//   - ctx context.Context
//   - postID string
func (_e *MockIReactionRepository_Expecter) GetReactionsByPost(ctx interface{}, postID interface{}) *MockIReactionRepository_GetReactionsByPost_Call {
	return &MockIReactionRepository_GetReactionsByPost_Call{Call: _e.mock.On("GetReactionsByPost", ctx, postID)}
}

func (_c *MockIReactionRepository_GetReactionsByPost_Call) Run(run func(ctx context.Context, postID string)) *MockIReactionRepository_GetReactionsByPost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockIReactionRepository_GetReactionsByPost_Call) Return(_a0 []*domain.Reaction, _a1 error) *MockIReactionRepository_GetReactionsByPost_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIReactionRepository_GetReactionsByPost_Call) RunAndReturn(run func(context.Context, string) ([]*domain.Reaction, error)) *MockIReactionRepository_GetReactionsByPost_Call {
	_c.Call.Return(run)
	return _c
}

// GetReactionsByUser provides a mock function with given fields: ctx, userID
func (_m *MockIReactionRepository) GetReactionsByUser(ctx context.Context, userID string) ([]*domain.Reaction, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetReactionsByUser")
	}

	var r0 []*domain.Reaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*domain.Reaction, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*domain.Reaction); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Reaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIReactionRepository_GetReactionsByUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetReactionsByUser'
type MockIReactionRepository_GetReactionsByUser_Call struct {
	*mock.Call
}

// GetReactionsByUser is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
func (_e *MockIReactionRepository_Expecter) GetReactionsByUser(ctx interface{}, userID interface{}) *MockIReactionRepository_GetReactionsByUser_Call {
	return &MockIReactionRepository_GetReactionsByUser_Call{Call: _e.mock.On("GetReactionsByUser", ctx, userID)}
}

func (_c *MockIReactionRepository_GetReactionsByUser_Call) Run(run func(ctx context.Context, userID string)) *MockIReactionRepository_GetReactionsByUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockIReactionRepository_GetReactionsByUser_Call) Return(_a0 []*domain.Reaction, _a1 error) *MockIReactionRepository_GetReactionsByUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIReactionRepository_GetReactionsByUser_Call) RunAndReturn(run func(context.Context, string) ([]*domain.Reaction, error)) *MockIReactionRepository_GetReactionsByUser_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveReaction provides a mock function with given fields: ctx, reactionID
func (_m *MockIReactionRepository) RemoveReaction(ctx context.Context, reactionID string) error {
	ret := _m.Called(ctx, reactionID)

	if len(ret) == 0 {
		panic("no return value specified for RemoveReaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, reactionID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIReactionRepository_RemoveReaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveReaction'
type MockIReactionRepository_RemoveReaction_Call struct {
	*mock.Call
}

// RemoveReaction is a helper method to define mock.On call
//   - ctx context.Context
//   - reactionID string
func (_e *MockIReactionRepository_Expecter) RemoveReaction(ctx interface{}, reactionID interface{}) *MockIReactionRepository_RemoveReaction_Call {
	return &MockIReactionRepository_RemoveReaction_Call{Call: _e.mock.On("RemoveReaction", ctx, reactionID)}
}

func (_c *MockIReactionRepository_RemoveReaction_Call) Run(run func(ctx context.Context, reactionID string)) *MockIReactionRepository_RemoveReaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockIReactionRepository_RemoveReaction_Call) Return(_a0 error) *MockIReactionRepository_RemoveReaction_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIReactionRepository_RemoveReaction_Call) RunAndReturn(run func(context.Context, string) error) *MockIReactionRepository_RemoveReaction_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIReactionRepository creates a new instance of MockIReactionRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIReactionRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIReactionRepository {
	mock := &MockIReactionRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
