// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "write_base/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// MockIAIUsecase is an autogenerated mock type for the IAIUsecase type
type MockIAIUsecase struct {
	mock.Mock
}

type MockIAIUsecase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIAIUsecase) EXPECT() *MockIAIUsecase_Expecter {
	return &MockIAIUsecase_Expecter{mock: &_m.Mock}
}

// GenerateContent provides a mock function with given fields: ctx, req
func (_m *MockIAIUsecase) GenerateContent(ctx context.Context, req *domain.GenerateContentRequest) (*domain.GenerateContentResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GenerateContent")
	}

	var r0 *domain.GenerateContentResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.GenerateContentRequest) (*domain.GenerateContentResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.GenerateContentRequest) *domain.GenerateContentResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.GenerateContentResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.GenerateContentRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAIUsecase_GenerateContent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateContent'
type MockIAIUsecase_GenerateContent_Call struct {
	*mock.Call
}

// GenerateContent is a helper method to define mock.On call
//   - ctx context.Context
//   - req *domain.GenerateContentRequest
func (_e *MockIAIUsecase_Expecter) GenerateContent(ctx interface{}, req interface{}) *MockIAIUsecase_GenerateContent_Call {
	return &MockIAIUsecase_GenerateContent_Call{Call: _e.mock.On("GenerateContent", ctx, req)}
}

func (_c *MockIAIUsecase_GenerateContent_Call) Run(run func(ctx context.Context, req *domain.GenerateContentRequest)) *MockIAIUsecase_GenerateContent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.GenerateContentRequest))
	})
	return _c
}

func (_c *MockIAIUsecase_GenerateContent_Call) Return(_a0 *domain.GenerateContentResponse, _a1 error) *MockIAIUsecase_GenerateContent_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAIUsecase_GenerateContent_Call) RunAndReturn(run func(context.Context, *domain.GenerateContentRequest) (*domain.GenerateContentResponse, error)) *MockIAIUsecase_GenerateContent_Call {
	_c.Call.Return(run)
	return _c
}

// GetSuggestions provides a mock function with given fields: ctx, req
func (_m *MockIAIUsecase) GetSuggestions(ctx context.Context, req *domain.SuggestionRequest) (*domain.SuggestionResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GetSuggestions")
	}

	var r0 *domain.SuggestionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.SuggestionRequest) (*domain.SuggestionResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.SuggestionRequest) *domain.SuggestionResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.SuggestionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.SuggestionRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAIUsecase_GetSuggestions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSuggestions'
type MockIAIUsecase_GetSuggestions_Call struct {
	*mock.Call
}

// GetSuggestions is a helper method to define mock.On call
//   - ctx context.Context
//   - req *domain.SuggestionRequest
func (_e *MockIAIUsecase_Expecter) GetSuggestions(ctx interface{}, req interface{}) *MockIAIUsecase_GetSuggestions_Call {
	return &MockIAIUsecase_GetSuggestions_Call{Call: _e.mock.On("GetSuggestions", ctx, req)}
}

func (_c *MockIAIUsecase_GetSuggestions_Call) Run(run func(ctx context.Context, req *domain.SuggestionRequest)) *MockIAIUsecase_GetSuggestions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.SuggestionRequest))
	})
	return _c
}

func (_c *MockIAIUsecase_GetSuggestions_Call) Return(_a0 *domain.SuggestionResponse, _a1 error) *MockIAIUsecase_GetSuggestions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAIUsecase_GetSuggestions_Call) RunAndReturn(run func(context.Context, *domain.SuggestionRequest) (*domain.SuggestionResponse, error)) *MockIAIUsecase_GetSuggestions_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIAIUsecase creates a new instance of MockIAIUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIAIUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIAIUsecase {
	mock := &MockIAIUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
