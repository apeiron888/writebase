// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "write_base/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// MockIUserUsecase is an autogenerated mock type for the IUserUsecase type
type MockIUserUsecase struct {
	mock.Mock
}

type MockIUserUsecase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIUserUsecase) EXPECT() *MockIUserUsecase_Expecter {
	return &MockIUserUsecase_Expecter{mock: &_m.Mock}
}

// ChangePassword provides a mock function with given fields: ctx, userID, oldPassword, newPassword
func (_m *MockIUserUsecase) ChangePassword(ctx context.Context, userID string, oldPassword string, newPassword string) error {
	ret := _m.Called(ctx, userID, oldPassword, newPassword)

	if len(ret) == 0 {
		panic("no return value specified for ChangePassword")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, userID, oldPassword, newPassword)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIUserUsecase_ChangePassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ChangePassword'
type MockIUserUsecase_ChangePassword_Call struct {
	*mock.Call
}

// ChangePassword is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
//   - oldPassword string
//   - newPassword string
func (_e *MockIUserUsecase_Expecter) ChangePassword(ctx interface{}, userID interface{}, oldPassword interface{}, newPassword interface{}) *MockIUserUsecase_ChangePassword_Call {
	return &MockIUserUsecase_ChangePassword_Call{Call: _e.mock.On("ChangePassword", ctx, userID, oldPassword, newPassword)}
}

func (_c *MockIUserUsecase_ChangePassword_Call) Run(run func(ctx context.Context, userID string, oldPassword string, newPassword string)) *MockIUserUsecase_ChangePassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockIUserUsecase_ChangePassword_Call) Return(_a0 error) *MockIUserUsecase_ChangePassword_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIUserUsecase_ChangePassword_Call) RunAndReturn(run func(context.Context, string, string, string) error) *MockIUserUsecase_ChangePassword_Call {
	_c.Call.Return(run)
	return _c
}

// DemoteToUser provides a mock function with given fields: ctx, UserID
func (_m *MockIUserUsecase) DemoteToUser(ctx context.Context, UserID string) error {
	ret := _m.Called(ctx, UserID)

	if len(ret) == 0 {
		panic("no return value specified for DemoteToUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, UserID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIUserUsecase_DemoteToUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DemoteToUser'
type MockIUserUsecase_DemoteToUser_Call struct {
	*mock.Call
}

// DemoteToUser is a helper method to define mock.On call
//   - ctx context.Context
//   - UserID string
func (_e *MockIUserUsecase_Expecter) DemoteToUser(ctx interface{}, UserID interface{}) *MockIUserUsecase_DemoteToUser_Call {
	return &MockIUserUsecase_DemoteToUser_Call{Call: _e.mock.On("DemoteToUser", ctx, UserID)}
}

func (_c *MockIUserUsecase_DemoteToUser_Call) Run(run func(ctx context.Context, UserID string)) *MockIUserUsecase_DemoteToUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockIUserUsecase_DemoteToUser_Call) Return(_a0 error) *MockIUserUsecase_DemoteToUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIUserUsecase_DemoteToUser_Call) RunAndReturn(run func(context.Context, string) error) *MockIUserUsecase_DemoteToUser_Call {
	_c.Call.Return(run)
	return _c
}

// DisableUser provides a mock function with given fields: ctx, userID
func (_m *MockIUserUsecase) DisableUser(ctx context.Context, userID string) error {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for DisableUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIUserUsecase_DisableUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DisableUser'
type MockIUserUsecase_DisableUser_Call struct {
	*mock.Call
}

// DisableUser is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
func (_e *MockIUserUsecase_Expecter) DisableUser(ctx interface{}, userID interface{}) *MockIUserUsecase_DisableUser_Call {
	return &MockIUserUsecase_DisableUser_Call{Call: _e.mock.On("DisableUser", ctx, userID)}
}

func (_c *MockIUserUsecase_DisableUser_Call) Run(run func(ctx context.Context, userID string)) *MockIUserUsecase_DisableUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockIUserUsecase_DisableUser_Call) Return(_a0 error) *MockIUserUsecase_DisableUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIUserUsecase_DisableUser_Call) RunAndReturn(run func(context.Context, string) error) *MockIUserUsecase_DisableUser_Call {
	_c.Call.Return(run)
	return _c
}

// EnableUser provides a mock function with given fields: ctx, userID
func (_m *MockIUserUsecase) EnableUser(ctx context.Context, userID string) error {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for EnableUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIUserUsecase_EnableUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnableUser'
type MockIUserUsecase_EnableUser_Call struct {
	*mock.Call
}

// EnableUser is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
func (_e *MockIUserUsecase_Expecter) EnableUser(ctx interface{}, userID interface{}) *MockIUserUsecase_EnableUser_Call {
	return &MockIUserUsecase_EnableUser_Call{Call: _e.mock.On("EnableUser", ctx, userID)}
}

func (_c *MockIUserUsecase_EnableUser_Call) Run(run func(ctx context.Context, userID string)) *MockIUserUsecase_EnableUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockIUserUsecase_EnableUser_Call) Return(_a0 error) *MockIUserUsecase_EnableUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIUserUsecase_EnableUser_Call) RunAndReturn(run func(context.Context, string) error) *MockIUserUsecase_EnableUser_Call {
	_c.Call.Return(run)
	return _c
}

// ForgotPassword provides a mock function with given fields: ctx, email
func (_m *MockIUserUsecase) ForgotPassword(ctx context.Context, email string) error {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for ForgotPassword")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIUserUsecase_ForgotPassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ForgotPassword'
type MockIUserUsecase_ForgotPassword_Call struct {
	*mock.Call
}

// ForgotPassword is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *MockIUserUsecase_Expecter) ForgotPassword(ctx interface{}, email interface{}) *MockIUserUsecase_ForgotPassword_Call {
	return &MockIUserUsecase_ForgotPassword_Call{Call: _e.mock.On("ForgotPassword", ctx, email)}
}

func (_c *MockIUserUsecase_ForgotPassword_Call) Run(run func(ctx context.Context, email string)) *MockIUserUsecase_ForgotPassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockIUserUsecase_ForgotPassword_Call) Return(_a0 error) *MockIUserUsecase_ForgotPassword_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIUserUsecase_ForgotPassword_Call) RunAndReturn(run func(context.Context, string) error) *MockIUserUsecase_ForgotPassword_Call {
	_c.Call.Return(run)
	return _c
}

// GetProfile provides a mock function with given fields: ctx, userID
func (_m *MockIUserUsecase) GetProfile(ctx context.Context, userID string) (*domain.User, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetProfile")
	}

	var r0 *domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.User, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.User); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIUserUsecase_GetProfile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProfile'
type MockIUserUsecase_GetProfile_Call struct {
	*mock.Call
}

// GetProfile is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
func (_e *MockIUserUsecase_Expecter) GetProfile(ctx interface{}, userID interface{}) *MockIUserUsecase_GetProfile_Call {
	return &MockIUserUsecase_GetProfile_Call{Call: _e.mock.On("GetProfile", ctx, userID)}
}

func (_c *MockIUserUsecase_GetProfile_Call) Run(run func(ctx context.Context, userID string)) *MockIUserUsecase_GetProfile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockIUserUsecase_GetProfile_Call) Return(_a0 *domain.User, _a1 error) *MockIUserUsecase_GetProfile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIUserUsecase_GetProfile_Call) RunAndReturn(run func(context.Context, string) (*domain.User, error)) *MockIUserUsecase_GetProfile_Call {
	_c.Call.Return(run)
	return _c
}

// Login provides a mock function with given fields: ctx, loginInput, metadata
func (_m *MockIUserUsecase) Login(ctx context.Context, loginInput *domain.LoginInput, metadata *domain.AuthMetadata) (*domain.LoginResult, error) {
	ret := _m.Called(ctx, loginInput, metadata)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 *domain.LoginResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.LoginInput, *domain.AuthMetadata) (*domain.LoginResult, error)); ok {
		return rf(ctx, loginInput, metadata)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.LoginInput, *domain.AuthMetadata) *domain.LoginResult); ok {
		r0 = rf(ctx, loginInput, metadata)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.LoginResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.LoginInput, *domain.AuthMetadata) error); ok {
		r1 = rf(ctx, loginInput, metadata)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIUserUsecase_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type MockIUserUsecase_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - ctx context.Context
//   - loginInput *domain.LoginInput
//   - metadata *domain.AuthMetadata
func (_e *MockIUserUsecase_Expecter) Login(ctx interface{}, loginInput interface{}, metadata interface{}) *MockIUserUsecase_Login_Call {
	return &MockIUserUsecase_Login_Call{Call: _e.mock.On("Login", ctx, loginInput, metadata)}
}

func (_c *MockIUserUsecase_Login_Call) Run(run func(ctx context.Context, loginInput *domain.LoginInput, metadata *domain.AuthMetadata)) *MockIUserUsecase_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.LoginInput), args[2].(*domain.AuthMetadata))
	})
	return _c
}

func (_c *MockIUserUsecase_Login_Call) Return(_a0 *domain.LoginResult, _a1 error) *MockIUserUsecase_Login_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIUserUsecase_Login_Call) RunAndReturn(run func(context.Context, *domain.LoginInput, *domain.AuthMetadata) (*domain.LoginResult, error)) *MockIUserUsecase_Login_Call {
	_c.Call.Return(run)
	return _c
}

// LoginOrRegisterOAuthUser provides a mock function with given fields: ctx, registerInput, metadata
func (_m *MockIUserUsecase) LoginOrRegisterOAuthUser(ctx context.Context, registerInput *domain.RegisterInput, metadata *domain.AuthMetadata) (*domain.LoginResult, error) {
	ret := _m.Called(ctx, registerInput, metadata)

	if len(ret) == 0 {
		panic("no return value specified for LoginOrRegisterOAuthUser")
	}

	var r0 *domain.LoginResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.RegisterInput, *domain.AuthMetadata) (*domain.LoginResult, error)); ok {
		return rf(ctx, registerInput, metadata)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.RegisterInput, *domain.AuthMetadata) *domain.LoginResult); ok {
		r0 = rf(ctx, registerInput, metadata)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.LoginResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.RegisterInput, *domain.AuthMetadata) error); ok {
		r1 = rf(ctx, registerInput, metadata)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIUserUsecase_LoginOrRegisterOAuthUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoginOrRegisterOAuthUser'
type MockIUserUsecase_LoginOrRegisterOAuthUser_Call struct {
	*mock.Call
}

// LoginOrRegisterOAuthUser is a helper method to define mock.On call
//   - ctx context.Context
//   - registerInput *domain.RegisterInput
//   - metadata *domain.AuthMetadata
func (_e *MockIUserUsecase_Expecter) LoginOrRegisterOAuthUser(ctx interface{}, registerInput interface{}, metadata interface{}) *MockIUserUsecase_LoginOrRegisterOAuthUser_Call {
	return &MockIUserUsecase_LoginOrRegisterOAuthUser_Call{Call: _e.mock.On("LoginOrRegisterOAuthUser", ctx, registerInput, metadata)}
}

func (_c *MockIUserUsecase_LoginOrRegisterOAuthUser_Call) Run(run func(ctx context.Context, registerInput *domain.RegisterInput, metadata *domain.AuthMetadata)) *MockIUserUsecase_LoginOrRegisterOAuthUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.RegisterInput), args[2].(*domain.AuthMetadata))
	})
	return _c
}

func (_c *MockIUserUsecase_LoginOrRegisterOAuthUser_Call) Return(_a0 *domain.LoginResult, _a1 error) *MockIUserUsecase_LoginOrRegisterOAuthUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIUserUsecase_LoginOrRegisterOAuthUser_Call) RunAndReturn(run func(context.Context, *domain.RegisterInput, *domain.AuthMetadata) (*domain.LoginResult, error)) *MockIUserUsecase_LoginOrRegisterOAuthUser_Call {
	_c.Call.Return(run)
	return _c
}

// Logout provides a mock function with given fields: ctx, refreshToken
func (_m *MockIUserUsecase) Logout(ctx context.Context, refreshToken string) error {
	ret := _m.Called(ctx, refreshToken)

	if len(ret) == 0 {
		panic("no return value specified for Logout")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, refreshToken)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIUserUsecase_Logout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Logout'
type MockIUserUsecase_Logout_Call struct {
	*mock.Call
}

// Logout is a helper method to define mock.On call
//   - ctx context.Context
//   - refreshToken string
func (_e *MockIUserUsecase_Expecter) Logout(ctx interface{}, refreshToken interface{}) *MockIUserUsecase_Logout_Call {
	return &MockIUserUsecase_Logout_Call{Call: _e.mock.On("Logout", ctx, refreshToken)}
}

func (_c *MockIUserUsecase_Logout_Call) Run(run func(ctx context.Context, refreshToken string)) *MockIUserUsecase_Logout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockIUserUsecase_Logout_Call) Return(_a0 error) *MockIUserUsecase_Logout_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIUserUsecase_Logout_Call) RunAndReturn(run func(context.Context, string) error) *MockIUserUsecase_Logout_Call {
	_c.Call.Return(run)
	return _c
}

// PromoteToAdmin provides a mock function with given fields: ctx, UserID
func (_m *MockIUserUsecase) PromoteToAdmin(ctx context.Context, UserID string) error {
	ret := _m.Called(ctx, UserID)

	if len(ret) == 0 {
		panic("no return value specified for PromoteToAdmin")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, UserID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIUserUsecase_PromoteToAdmin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PromoteToAdmin'
type MockIUserUsecase_PromoteToAdmin_Call struct {
	*mock.Call
}

// PromoteToAdmin is a helper method to define mock.On call
//   - ctx context.Context
//   - UserID string
func (_e *MockIUserUsecase_Expecter) PromoteToAdmin(ctx interface{}, UserID interface{}) *MockIUserUsecase_PromoteToAdmin_Call {
	return &MockIUserUsecase_PromoteToAdmin_Call{Call: _e.mock.On("PromoteToAdmin", ctx, UserID)}
}

func (_c *MockIUserUsecase_PromoteToAdmin_Call) Run(run func(ctx context.Context, UserID string)) *MockIUserUsecase_PromoteToAdmin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockIUserUsecase_PromoteToAdmin_Call) Return(_a0 error) *MockIUserUsecase_PromoteToAdmin_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIUserUsecase_PromoteToAdmin_Call) RunAndReturn(run func(context.Context, string) error) *MockIUserUsecase_PromoteToAdmin_Call {
	_c.Call.Return(run)
	return _c
}

// RefreshToken provides a mock function with given fields: ctx, refreshToken
func (_m *MockIUserUsecase) RefreshToken(ctx context.Context, refreshToken string) (*domain.LoginResult, error) {
	ret := _m.Called(ctx, refreshToken)

	if len(ret) == 0 {
		panic("no return value specified for RefreshToken")
	}

	var r0 *domain.LoginResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.LoginResult, error)); ok {
		return rf(ctx, refreshToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.LoginResult); ok {
		r0 = rf(ctx, refreshToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.LoginResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, refreshToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIUserUsecase_RefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RefreshToken'
type MockIUserUsecase_RefreshToken_Call struct {
	*mock.Call
}

// RefreshToken is a helper method to define mock.On call
//   - ctx context.Context
//   - refreshToken string
func (_e *MockIUserUsecase_Expecter) RefreshToken(ctx interface{}, refreshToken interface{}) *MockIUserUsecase_RefreshToken_Call {
	return &MockIUserUsecase_RefreshToken_Call{Call: _e.mock.On("RefreshToken", ctx, refreshToken)}
}

func (_c *MockIUserUsecase_RefreshToken_Call) Run(run func(ctx context.Context, refreshToken string)) *MockIUserUsecase_RefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockIUserUsecase_RefreshToken_Call) Return(_a0 *domain.LoginResult, _a1 error) *MockIUserUsecase_RefreshToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIUserUsecase_RefreshToken_Call) RunAndReturn(run func(context.Context, string) (*domain.LoginResult, error)) *MockIUserUsecase_RefreshToken_Call {
	_c.Call.Return(run)
	return _c
}

// Register provides a mock function with given fields: ctx, registerInput
func (_m *MockIUserUsecase) Register(ctx context.Context, registerInput *domain.RegisterInput) error {
	ret := _m.Called(ctx, registerInput)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.RegisterInput) error); ok {
		r0 = rf(ctx, registerInput)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIUserUsecase_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type MockIUserUsecase_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - ctx context.Context
//   - registerInput *domain.RegisterInput
func (_e *MockIUserUsecase_Expecter) Register(ctx interface{}, registerInput interface{}) *MockIUserUsecase_Register_Call {
	return &MockIUserUsecase_Register_Call{Call: _e.mock.On("Register", ctx, registerInput)}
}

func (_c *MockIUserUsecase_Register_Call) Run(run func(ctx context.Context, registerInput *domain.RegisterInput)) *MockIUserUsecase_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.RegisterInput))
	})
	return _c
}

func (_c *MockIUserUsecase_Register_Call) Return(_a0 error) *MockIUserUsecase_Register_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIUserUsecase_Register_Call) RunAndReturn(run func(context.Context, *domain.RegisterInput) error) *MockIUserUsecase_Register_Call {
	_c.Call.Return(run)
	return _c
}

// ResetPassword provides a mock function with given fields: ctx, resetToken, newPassword
func (_m *MockIUserUsecase) ResetPassword(ctx context.Context, resetToken string, newPassword string) error {
	ret := _m.Called(ctx, resetToken, newPassword)

	if len(ret) == 0 {
		panic("no return value specified for ResetPassword")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, resetToken, newPassword)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIUserUsecase_ResetPassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResetPassword'
type MockIUserUsecase_ResetPassword_Call struct {
	*mock.Call
}

// ResetPassword is a helper method to define mock.On call
//   - ctx context.Context
//   - resetToken string
//   - newPassword string
func (_e *MockIUserUsecase_Expecter) ResetPassword(ctx interface{}, resetToken interface{}, newPassword interface{}) *MockIUserUsecase_ResetPassword_Call {
	return &MockIUserUsecase_ResetPassword_Call{Call: _e.mock.On("ResetPassword", ctx, resetToken, newPassword)}
}

func (_c *MockIUserUsecase_ResetPassword_Call) Run(run func(ctx context.Context, resetToken string, newPassword string)) *MockIUserUsecase_ResetPassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockIUserUsecase_ResetPassword_Call) Return(_a0 error) *MockIUserUsecase_ResetPassword_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIUserUsecase_ResetPassword_Call) RunAndReturn(run func(context.Context, string, string) error) *MockIUserUsecase_ResetPassword_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateEmail provides a mock function with given fields: ctx, updateAccoutInput
func (_m *MockIUserUsecase) UpdateEmail(ctx context.Context, updateAccoutInput *domain.UpdateAccountInput) error {
	ret := _m.Called(ctx, updateAccoutInput)

	if len(ret) == 0 {
		panic("no return value specified for UpdateEmail")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.UpdateAccountInput) error); ok {
		r0 = rf(ctx, updateAccoutInput)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIUserUsecase_UpdateEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateEmail'
type MockIUserUsecase_UpdateEmail_Call struct {
	*mock.Call
}

// UpdateEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - updateAccoutInput *domain.UpdateAccountInput
func (_e *MockIUserUsecase_Expecter) UpdateEmail(ctx interface{}, updateAccoutInput interface{}) *MockIUserUsecase_UpdateEmail_Call {
	return &MockIUserUsecase_UpdateEmail_Call{Call: _e.mock.On("UpdateEmail", ctx, updateAccoutInput)}
}

func (_c *MockIUserUsecase_UpdateEmail_Call) Run(run func(ctx context.Context, updateAccoutInput *domain.UpdateAccountInput)) *MockIUserUsecase_UpdateEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.UpdateAccountInput))
	})
	return _c
}

func (_c *MockIUserUsecase_UpdateEmail_Call) Return(_a0 error) *MockIUserUsecase_UpdateEmail_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIUserUsecase_UpdateEmail_Call) RunAndReturn(run func(context.Context, *domain.UpdateAccountInput) error) *MockIUserUsecase_UpdateEmail_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateProfile provides a mock function with given fields: ctx, updateProfileInpute
func (_m *MockIUserUsecase) UpdateProfile(ctx context.Context, updateProfileInpute *domain.UpdateProfileInput) error {
	ret := _m.Called(ctx, updateProfileInpute)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProfile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.UpdateProfileInput) error); ok {
		r0 = rf(ctx, updateProfileInpute)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIUserUsecase_UpdateProfile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProfile'
type MockIUserUsecase_UpdateProfile_Call struct {
	*mock.Call
}

// UpdateProfile is a helper method to define mock.On call
//   - ctx context.Context
//   - updateProfileInpute *domain.UpdateProfileInput
func (_e *MockIUserUsecase_Expecter) UpdateProfile(ctx interface{}, updateProfileInpute interface{}) *MockIUserUsecase_UpdateProfile_Call {
	return &MockIUserUsecase_UpdateProfile_Call{Call: _e.mock.On("UpdateProfile", ctx, updateProfileInpute)}
}

func (_c *MockIUserUsecase_UpdateProfile_Call) Run(run func(ctx context.Context, updateProfileInpute *domain.UpdateProfileInput)) *MockIUserUsecase_UpdateProfile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.UpdateProfileInput))
	})
	return _c
}

func (_c *MockIUserUsecase_UpdateProfile_Call) Return(_a0 error) *MockIUserUsecase_UpdateProfile_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIUserUsecase_UpdateProfile_Call) RunAndReturn(run func(context.Context, *domain.UpdateProfileInput) error) *MockIUserUsecase_UpdateProfile_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUsername provides a mock function with given fields: ctx, updateAccoutInput
func (_m *MockIUserUsecase) UpdateUsername(ctx context.Context, updateAccoutInput *domain.UpdateAccountInput) error {
	ret := _m.Called(ctx, updateAccoutInput)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUsername")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.UpdateAccountInput) error); ok {
		r0 = rf(ctx, updateAccoutInput)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIUserUsecase_UpdateUsername_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUsername'
type MockIUserUsecase_UpdateUsername_Call struct {
	*mock.Call
}

// UpdateUsername is a helper method to define mock.On call
//   - ctx context.Context
//   - updateAccoutInput *domain.UpdateAccountInput
func (_e *MockIUserUsecase_Expecter) UpdateUsername(ctx interface{}, updateAccoutInput interface{}) *MockIUserUsecase_UpdateUsername_Call {
	return &MockIUserUsecase_UpdateUsername_Call{Call: _e.mock.On("UpdateUsername", ctx, updateAccoutInput)}
}

func (_c *MockIUserUsecase_UpdateUsername_Call) Run(run func(ctx context.Context, updateAccoutInput *domain.UpdateAccountInput)) *MockIUserUsecase_UpdateUsername_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.UpdateAccountInput))
	})
	return _c
}

func (_c *MockIUserUsecase_UpdateUsername_Call) Return(_a0 error) *MockIUserUsecase_UpdateUsername_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIUserUsecase_UpdateUsername_Call) RunAndReturn(run func(context.Context, *domain.UpdateAccountInput) error) *MockIUserUsecase_UpdateUsername_Call {
	_c.Call.Return(run)
	return _c
}

// VerifyEmail provides a mock function with given fields: ctx, token
func (_m *MockIUserUsecase) VerifyEmail(ctx context.Context, token string) error {
	ret := _m.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for VerifyEmail")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIUserUsecase_VerifyEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyEmail'
type MockIUserUsecase_VerifyEmail_Call struct {
	*mock.Call
}

// VerifyEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
func (_e *MockIUserUsecase_Expecter) VerifyEmail(ctx interface{}, token interface{}) *MockIUserUsecase_VerifyEmail_Call {
	return &MockIUserUsecase_VerifyEmail_Call{Call: _e.mock.On("VerifyEmail", ctx, token)}
}

func (_c *MockIUserUsecase_VerifyEmail_Call) Run(run func(ctx context.Context, token string)) *MockIUserUsecase_VerifyEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockIUserUsecase_VerifyEmail_Call) Return(_a0 error) *MockIUserUsecase_VerifyEmail_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIUserUsecase_VerifyEmail_Call) RunAndReturn(run func(context.Context, string) error) *MockIUserUsecase_VerifyEmail_Call {
	_c.Call.Return(run)
	return _c
}

// VerifyUpdateEmail provides a mock function with given fields: ctx, token
func (_m *MockIUserUsecase) VerifyUpdateEmail(ctx context.Context, token string) error {
	ret := _m.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for VerifyUpdateEmail")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIUserUsecase_VerifyUpdateEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyUpdateEmail'
type MockIUserUsecase_VerifyUpdateEmail_Call struct {
	*mock.Call
}

// VerifyUpdateEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
func (_e *MockIUserUsecase_Expecter) VerifyUpdateEmail(ctx interface{}, token interface{}) *MockIUserUsecase_VerifyUpdateEmail_Call {
	return &MockIUserUsecase_VerifyUpdateEmail_Call{Call: _e.mock.On("VerifyUpdateEmail", ctx, token)}
}

func (_c *MockIUserUsecase_VerifyUpdateEmail_Call) Run(run func(ctx context.Context, token string)) *MockIUserUsecase_VerifyUpdateEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockIUserUsecase_VerifyUpdateEmail_Call) Return(_a0 error) *MockIUserUsecase_VerifyUpdateEmail_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIUserUsecase_VerifyUpdateEmail_Call) RunAndReturn(run func(context.Context, string) error) *MockIUserUsecase_VerifyUpdateEmail_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIUserUsecase creates a new instance of MockIUserUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIUserUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIUserUsecase {
	mock := &MockIUserUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
